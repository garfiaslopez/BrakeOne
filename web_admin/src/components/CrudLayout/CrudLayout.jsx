import React, { Component, Fragment } from "react";
import styles from "./CrudLayoutStyles";
import moment from "moment";
import { FetchXHR } from "../../helpers/generals";

import {
  Input,
  Button,
  Icon,
  DatePicker,
  Menu,
  Dropdown,
  Divider,
  Table,
  Tag,
  Modal,
  Pagination,
  Alert,
  AutoComplete
} from "antd";

import isEmpty from "lodash/isEmpty";
import locale_es from "antd/lib/date-picker/locale/es_ES";
import FormGenerator from "../FormGenerator/FormGenerator";
import PrinterDownload from "../PrinterDownload/PrinterDownload";
import PrinterRecipes from "../PrinterRecipes/PrinterRecipes";
import { formatNumber } from "../../helpers/generals";

class CrudLayout extends Component {
  state = {
    data: [],
    next_folio: undefined,
    selected_data: undefined,
    loading_data: false,
    loading_submit: false,
    error: undefined,
    search_text: undefined,
    initial_date: undefined,
    final_date: undefined,
    docs_per_page: 50,
    page: 1,
    total_docs: 0,
    opened_submit: false,
    opened_view: false,
    opened_print: false,
    opened_printer_recipes: false,
    selected_type_recipes: undefined,
    sortedInfo: {
      order: "descend",
      columnKey: "denomination",
    },
    open_custom_modal: undefined,
  };

  componentDidMount() {
    this.limit = 50;
    this.page = 1;
    this.getData();

    this.refresh_interval = setInterval(() => {
      this.getData();
    }, 60000);
  }

  componentWillUnmount() {
    clearInterval(this.refresh_interval);
  }

  // GET DATA
  getData() {
    this.setState({
      loading_data: true,
    });
    const url = process.env.REACT_APP_API_URL + "/" + this.model.plural;
    var POSTDATA = {
      limit: this.limit,
      page: this.page,
      filters: {},
    };
    if (this.additional_get_data) {
      POSTDATA["filters"] = this.additional_get_data;
    }
    if (this.sort_field) {
      POSTDATA["sort_field"] = this.sort_field;
      POSTDATA["sort_order"] = this.sort_order;
    }

    if (!isEmpty(this.search_text)) {
      if (this.model.name === "quotation") {
        POSTDATA["or_filters"] = {};
        POSTDATA["or_filters"]["folio"] = Number(this.search_text);
        POSTDATA["or_filters"]["$text"] = { $search: this.search_text };
      } else if (this.model.name === "sell") {
        POSTDATA["or_filters"] = {};       
        POSTDATA["or_filters"]["client_name"] = this.search_text;
        POSTDATA["or_filters"]["folio"] = Number(this.search_text);            

      } else if (this.model.name === "reception") {
        POSTDATA["or_filters"] = {};
        POSTDATA["or_filters"]["folio"] = Number(this.search_text);
        POSTDATA["or_filters"]["provider_id"] = this.search_text;
      } else if (this.model.name === "payment") {
        POSTDATA["or_filters"] = {};
        POSTDATA["or_filters"]["folio"] = Number(this.search_text);
      } else if (this.model.name === "reception-payment") {
        POSTDATA["or_filters"] = {};
        POSTDATA["or_filters"]["folio"] = Number(this.search_text);
      } else if (this.model.name === "client") {

        POSTDATA["search_text"] = this.search_text;        

      } else if (this.model.name === "product") {
        POSTDATA["or_filters"] = {};
        let busquedas = this.search_text;
        var caracter1 = this.search_text.charAt(0);
        var caracter2 = this.search_text.charAt(1);
        var caracter3 = this.search_text.charAt(2);
		var caracter4 = this.search_text.charAt(3);
		var caracter5 = this.search_text.charAt(4);
		var caracter6 = this.search_text.charAt(5);
		var caracter7 = this.search_text.charAt(6);
		/* var caracter8 = this.search_text.charAt(7); */

		// //2275.10
        var iniciales = caracter1 + caracter2;
        var letras = caracter1 + caracter2 + caracter3;
		var tresletras = caracter1 + caracter2 + caracter3 + caracter4;
		var ultimas = caracter5 + caracter6 + caracter7;

        //Brembo con Xtra, Max y Normar
        if (
          iniciales === "A-" ||
          iniciales === "I-" ||
          iniciales === "a-" ||
          iniciales === "i-"
        ) {
          POSTDATA["search_text"] =
            this.search_text +
            " " +
            "&&" +
            this.search_text +
            "MAX" +
            " " +
            "&&" +
            this.search_text +
            "XTRA";
        }
        //Numeros largos Centric
        else if (
          tresletras === "320." ||
          tresletras === "905." ||
          tresletras === "412." ||
          tresletras === "406." ||
          tresletras === "116." ||
          tresletras === "117." ||
          tresletras === "122." ||
          tresletras === "227." ||
          tresletras === "301." ||
          tresletras === "105." ||
          tresletras === "104." ||
          tresletras === "102." ||
          tresletras === "121." ||
          tresletras === "309." ||
          tresletras === "106." ||
          tresletras === "103." ||
          tresletras === "500." ||
          tresletras === "300." ||
          tresletras === "100." ||
          tresletras === "306." ||
          tresletras === "120." ||
          tresletras === "123." ||
          tresletras === "125." ||
          tresletras === "126." ||
          tresletras === "127." ||
          tresletras === "128." ||
          tresletras === "110." ||
          tresletras === "111." ||
          tresletras === "950." ||
          tresletras === "978." ||
          tresletras === "905." ||
          letras === "83." ||
          letras === "31." ||
          tresletras === "228."
        ) {
          POSTDATA["or_filters"]["key_id"] = busquedas;
        }
        //Brembo numeros largos
        else if (letras === "09." || letras === "08." || letras === "14.") {
          bremLarge.forEach(function(numLargos, indice, array) {
            if (busquedas === numLargos) {
              POSTDATA["or_filters"]["key_id"] = busquedas;
            }
		  });
		 
        } else if(caracter5 === '.'){
			bremCort08.forEach(function(numLargos, indice, array) {
				if (busquedas === numLargos) {
				  POSTDATA["or_filters"]["key_id"] = '08.' + busquedas;
				}else{
					bremCort09.forEach(function(numLargos, indice, array) {
						if (busquedas === numLargos) {
						  POSTDATA["or_filters"]["key_id"] = '09.' + busquedas;
						}else{
							bremCorto14.forEach(function(numLargos, indice, array) {		
								if(busquedas === numLargos ){			
									POSTDATA['or_filters']['key_id'] = '14.' + busquedas;				
								}else{									
									
								}
							})
						}

					  })
				}
			  });
						  					 
		}else{
          POSTDATA["search_text"] = this.search_text;
        }
      }
    }
    if (this.initial_date && this.final_date) {
      POSTDATA["date"] = [
        this.initial_date.toISOString(),
        this.final_date.toISOString(),
      ];
    }
    if (this.populate_ids) {
      POSTDATA["populate_ids"] = this.populate_ids;
    }

    // WUATEFOK HERE!
    if (this.table_filters) {
      Object.keys(this.table_filters).forEach((f) => {
        if (this.table_filters[f].length > 0) {
          if (this.table_filters[f][0] === "stock.low.exists") {
            POSTDATA["filters"]["stock"] = { $lt: 0 };
          } else if (this.table_filters[f][0] === "stock.exists") {
            POSTDATA["filters"]["stock"] = { $gt: 0 };
          } else if (this.table_filters[f][0] === "stock.no.exists") {
            POSTDATA["filters"]["stock"] = { $lte: 0 };
          } else {
            POSTDATA["filters"][f] = this.table_filters[f];
          }
        } else {
          delete POSTDATA["filters"][f];
          delete POSTDATA["filters"]["stock"];
          delete POSTDATA["filters"]["$expr"];
        }
      });
    }
    FetchXHR(url, "POST", POSTDATA)
      .then((response) => {
        if (response.json.success) {
          let next_folio = undefined;
          if (
            response.json.data.docs.length > 0 &&
            response.json.data.docs[0].folio
          ) {
            next_folio = response.json.data.docs[0].folio + 1;
          }
          this.setState({
            table_data: response.json.data.docs.map((el, index) => ({
              ...el,
              key: index,
            })),
            next_folio,
            total_docs: response.json.data.total,
            loading_data: false,
          });
        } else {
          this.setState({
            loading_data: false,
            error: response.message,
          });
        }
      })
      .catch((onError) => {
        this.setState({
          loading_data: false,
          error: onError.message,
        });
      });
  }

  // MODAL FORM:

  refreshTable = () => {
    this.getData();
  };

  onOpenSubmitForm = () => {
    this.setState({
      opened_submit: true,
    });
  };

  onCloseSubmitForm = () => {
    this.setState({
      opened_submit: false,
      error: undefined,
      selected_data: undefined,
    });
  };

  onCloseViewForm = () => {
    this.setState({
      opened_view: false,
      error: undefined,
      selected_data: undefined,
    });
  };

  onCustomSubmitForm = (new_obj) => {
    this.setState({
      loading_submit: true,
    });
    const newArray = Object.assign([], this.state.table_data);
    if (this.state.selected_data) {
      const i = newArray.findIndex(
        (el) => el._id === this.state.selected_data._id
      );
      newArray[i] = {
        ...new_obj,
        key: i,
      };
    } else {
      newArray.unshift({
        ...new_obj,
        key: newArray.length,
      });
    }
    this.setState({
      table_data: newArray,
      total_docs: newArray.length,
      loading_submit: false,
      opened_submit: false,
      error: undefined,
      selected_data: undefined,
    });
  };

  // CREATE NORMAL SUBMIT:
  onSubmitForm = async (values, nested_values) => {
    console.log("onSubmitForm", values, nested_values);

    this.setState({
      loading_submit: true,
    });
    let POSTDATA = {
      ...values,
      ...nested_values,
      ...this.additional_submit_data,
    };
    let method = "POST";
    let url = process.env.REACT_APP_API_URL + "/" + this.model.singular;
    if (this.state.selected_data) {
      method = "PUT";
      url =
        process.env.REACT_APP_API_URL +
        "/" +
        this.model.singular +
        "/" +
        this.state.selected_data._id;
    }
    if (values.location) {
      // has geo, need create obj properly
      POSTDATA["location"] = {
        type: "Point",
        coordinates: values.location.coordinates,
      };
    }
    if (this.populate_ids) {
      POSTDATA["populate_ids"] = this.populate_ids;
    }

    if (this.model.name === "product") {
      await FetchXHR(
        process.env.REACT_APP_API_URL + "/helpers/replicate_product",
        "POST",
        {
          data: POSTDATA,
          id: this.state.selected_data ? this.state.selected_data._id : null,
          method,
        }
      );
    }

    // check for relationships and save it apart in her owns models.
    FetchXHR(url, method, POSTDATA)
      .then((response) => {
        if (response.json.success) {
          const newArray = Object.assign([], this.state.table_data);
          if (this.state.selected_data) {
            const i = newArray.findIndex(
              (el) => el._id === this.state.selected_data._id
            );
            newArray[i] = {
              ...response.json.obj,
              key: i,
            };
          } else {
            newArray.unshift({
              ...response.json.obj,
              key: newArray.length,
            });
          }
          this.setState({
            table_data: newArray,
            total_docs: newArray.length,
            loading_submit: false,
            opened_submit: false,
            error: undefined,
            selected_data: undefined,
          });
        } else {
          this.setState({
            error: response.json.message,
            loading_submit: false,
          });
        }
      })
      .catch((onError) => {
        this.setState({
          error: onError.message,
          loading_submit: false,
        });
      });
  };

  onView = (record) => {
    this.setState({
      selected_data: record,
      opened_view: true,
    });
  };

  onEdit = (record) => {
    this.setState({
      selected_data: record,
      opened_submit: true,
    });
  };

  onDelete = async (record) => {
    const url =
      process.env.REACT_APP_API_URL +
      "/" +
      this.model.singular +
      "/" +
      record._id;
    if (this.model.name === "product") {
      await FetchXHR(
        process.env.REACT_APP_API_URL + "/helpers/delete_product",
        "POST",
        {
          key_id: record.key_id,
          _id: record._id,
        }
      );
    }
    FetchXHR(url, "DELETE")
      .then((response) => {
        if (response.json.success) {
          const newArray = Object.assign([], this.state.table_data);
          const i = newArray.findIndex((el) => el._id === record._id);
          if (i !== -1) {
            newArray.splice(i, 1);
            this.setState({
              table_data: newArray,
              total_docs: newArray.length,
            });
          }
        } else {
          this.setState({
            error: response.json.message,
          });
        }
      })
      .catch((onError) => {
        this.setState({
          error: onError.message,
        });
      });
  };

  onPrint = (record, type) => {
    this.setState({
      selected_data: record,
      opened_printer_recipes: true,
      selected_type_recipes: type,
    });
  };

  // ACTIONS HANDLERS:

  // COMPONENTS HANDLERS:
  // SEARCH TEXT:
  onClickSearch = (search_text) => {
    this.search_text = search_text;
    setTimeout(() => {
    this.getData();
  }, 1000);
  };

  // RANGES DATE:
  onChangeRangeDate = (date, date_string) => {
    // parse only the day ?
    if (date.length > 0) {
      this.initial_date = date[0].startOf("day");
      this.final_date = date[1].endOf("day");
    } else {
      this.initial_date = undefined;
      this.final_date = undefined;
    }
    this.getData();
  };
  
  onSelectClient(client_name) {
	const client = this.state.products.find((el) => (el.key_id === client_name));
	let phone = client.phone_mobil;
	if (phone === "") {
		phone = client.phone_number;
		if (phone === "") {
			phone = client.phone_office;
		}
	}
	this.setState({
		openCarDropdown: true,
		search_text: client.name,
		client_id: client,
		client_name: client.name,
		client_phone: phone,
		price_type: client.price_type
	});
}

  // TABLE:
  //PAGINATOR:
  onChangePagination = (current, page_size) => {
    this.limit = page_size;
    this.page = current;
    this.getData();
  };

  onChangeTable = (pagination, filters, sorter) => {
    if (pagination.current) {
      this.limit = pagination.pageSize;
      this.page = pagination.current;
    }
    if (sorter.columnKey) {
      this.sort_field = sorter.columnKey;
      this.sort_order = sorter.order == "ascend" ? 1 : -1;
    }
    if (filters) {
      this.table_filters = filters;
    } else {
      this.table_filters = undefined;
    }
    this.getData();
  };

  renderFilters = () => {
    const SearchFilter = (
		<AutoComplete
                                            disabled={this.props.is_disabled || (this.props.fields && this.props.session.user.rol !== 'ADMIN')}
                                            autoFocus
                                            backfill
                                            placeholder={'Buscador...'}
                                            onSearch={this.onClickSearch}
                                            onSelect={(value) => { this.onClickSearch(value) }}
                                            value={this.state.client_name}
                                            onChange={(value) => {
                                                this.onChangeFieldName(value, 'client_name');
                                            }}
                                            dataSource={this.state.name_clients}
                                            style={styles.inputElement}
                                        />
    );
    const DateRangeFilter = (
      <DatePicker.RangePicker
        key="date_range_filter"
        style={styles.inputRangedate}
        onChange={this.onChangeRangeDate}
        locale={locale_es}
      />
    );
    if (this.state.filters_layout) {
      return this.state.filters_layout.map((f) => {
        switch (f) {
          case "search":
            return SearchFilter;
          case "date_range":
            return DateRangeFilter;
        }
      });
    }
    return [SearchFilter, DateRangeFilter];
  };

  getClients(search_text) {
	this.setState({
		loading_clients: true,
		search_text
	});
	const url = process.env.REACT_APP_API_URL + '/products';
	const POSTDATA = {
		limit: 100,
		page: 1,
		search_text
	}
	console.log(POSTDATA);
	FetchXHR(url, 'POST', POSTDATA).then((response) => {
		console.log(response);
		if (response.json.success) {
			this.setState({
				name_clients: response.json.data.docs.map((el)=>(el.key_id)),
				clients: response.json.data.docs.map((el, index)=>({
					...el,
					key: index
				})),
				loading_users: false
			});
		} else {
			this.setState({
				loading_clients: false,
				error: response.message
			});
		}
	}).catch((onError) => {
		this.setState({
			loading_clients: false,
			error: onError.message
		});
	});
}

onChangeFieldName(value, key) {
	console.log(value)
	let obj = {};
	obj[key] = value;
	this.setState(obj);
}


  render() {
    let title = "Agregar " + this.model.label;
    if (this.state.selectedData) {
      title = "Editar " + this.model.label;
    }
    let form = "";

    if (this.schema) {
      if (this.state.opened_submit) {
        form = (
          <FormGenerator
            session={this.props.session}
            key={"Create_Form"}
            is_disabled={false}
            title={title}
            open={this.state.opened_submit}
            loading={this.state.loading_submit}
            onClose={this.onCloseSubmitForm}
            onSubmit={this.onSubmitForm}
            onCustomSubmit={this.onCustomSubmitForm}
            schema={this.schema}
            error={this.state.error}
            dismissError={() => {
              this.setState({ error: undefined });
            }}
            fields={this.state.selected_data}
            next_folio={this.state.next_folio}
          />
        );
      } else if (this.state.opened_view) {
        form = (
          <FormGenerator
            key={"View_Form"}
            is_disabled={true}
            title={title}
            open={this.state.opened_view}
            onClose={this.onCloseViewForm}
            schema={this.schema}
            error={this.state.error}
            dismissError={() => {
              this.setState({ error: undefined });
            }}
            fields={this.state.selected_data}
            session={this.props.session}
          />
        );
      }
    } else {
      if (this.state.opened_submit && this.custom_submit) {
        form = (
          <this.custom_submit
            key={"Create_Custom_Form"}
            title={title}
            is_disabled={false}
            fields={this.state.selected_data}
            open={this.state.opened_submit}
            loading={this.state.loading_submit}
            onClose={this.onCloseSubmitForm}
            onSubmit={this.onSubmitForm}
            onCustomSubmit={this.onCustomSubmitForm}
            schema={this.schema}
            error={this.state.error}
            dismissError={() => {
              this.setState({ error: undefined });
            }}
            session={this.props.session}
            next_folio={this.state.next_folio}
          />
        );
      } else if (this.state.opened_view) {
        form = (
          <this.custom_submit
            key={"View_Custom_Form"}
            is_disabled={true}
            fields={this.state.selected_data}
            title={title}
            open={this.state.opened_view}
            onClose={this.onCloseViewForm}
            schema={this.schema}
            error={this.state.error}
            dismissError={() => {
              this.setState({ error: undefined });
            }}
            session={this.props.session}
          />
        );
      }
    }

    if (this.state.opened_print) {
      form = (
        <PrinterDownload
          key={"Print_Form"}
          title={"Imprimir o Descargar"}
          onClose={() => {
            this.setState({
              opened_print: false,
            });
          }}
          schema={this.schema}
          model={this.model}
          additional_get_data={this.additional_get_data}
          search_text={this.search_text}
          initial_date={this.initial_date}
          final_date={this.final_date}
          sort_field={this.sort_field}
          sort_order={this.sort_order}
          populate_ids={this.populate_ids}
          table_columns={this.table_columns.filter((el) => el.key != "action")}
        />
      );
    }

    if (this.state.opened_printer_recipes) {
      form = (
        <PrinterRecipes
          record={this.state.selected_data}
          type={this.state.selected_type_recipes}
          key={"Print_Form_Recipe"}
          title={"Imprimir"}
          onClose={() => {
            this.setState({
              opened_printer_recipes: false,
              selected_data: undefined,
              selected_type_recipes: undefined,
            });
          }}
        />
      );
    }

    let PrinterDownloadButton = "";
    if (
      this.props.session.user.rol === "ADMIN" ||
      this.props.session.user.rol === "MANAGER"
    ) {
      PrinterDownloadButton = (
        <Button.Group>
          <Button
            onClick={() => {
              this.setState({
                opened_print: true,
              });
            }}
            type="primary"
            icon="printer"
          >
            Imprimir O Descargar
          </Button>
        </Button.Group>
      );
    }

    if (this.state.open_custom_modal) {
      const ComponentToOpen = this.custom_modals[this.state.open_custom_modal];
      form = (
        <ComponentToOpen
          key={"CustomForm"}
          fields={this.state.selected_data}
          onClose={() => {
            this.setState({ open_custom_modal: undefined });
          }}
          refreshTable={this.refreshTable}
          error={this.state.error}
          dismissError={() => {
            this.setState({ error: undefined });
          }}
          session={this.props.session}
        />
      );
    }
    let Add_Button = "";
    if (!this.no_render_add) {
      Add_Button = (
        <Button type="primary" onClick={this.onOpenSubmitForm}>
          <Icon type="plus-circle-o" />
          Agregar Nuevo
        </Button>
      );
    }

    let RenderActions = "";
    if (this.actions) {
      RenderActions = this.actions.map((action) => {
        return (
          <Button
            type="primary"
            onClick={() => {
              action.func();
            }}
          >
            <Icon type={action.icon} />
            {action.label}
          </Button>
        );
      });
    }
    return (
      <Fragment>
        {form}
        <Divider dashed={true} orientation="left">
          Acciones
        </Divider>
        <div style={styles.actions}>
          {PrinterDownloadButton}
          {RenderActions}
          {this.renderFilters()}
          {Add_Button}
        </div>
        <Divider dashed={true} orientation="left">
          {"[" + formatNumber(this.state.total_docs) + "]   "} Resultados.
        </Divider>        
        <Table
          bordered
          style={styles.tableLayout}
          scroll={{ y: window.innerHeight - 155 }}
          onChange={this.onChangeTable}
          columns={this.table_columns}
          dataSource={this.state.table_data}
          loading={this.state.loading_data}
          size="small"
          pagination={{
            showSizeChanger: true,
            defaultCurrent: this.page,
            total: this.state.total_docs,
            defaultPageSize: 50,
            pageSize: 50,
            pageSizeOptions: ["50", "100", "200"],
          }}
          locale={{
            filterTitle: "Filtro",
            filterConfirm: "Ok",
            filterReset: "Limpiar",
            emptyText: "Sin Datos",
          }}
          onRow={(record) => {
            return {
              onClick: () => {
                this.onView(record);
              },
            };
          }}
        />
      </Fragment>
    );
  }
}

//Numeros AIMCO
const numberAim = [
  "3102",
  "3108",
  "3110",
  "3114",
  "3116",
  "3118",
  "3120",
  "3125",
  "3132",
  "3134",
  "3136",
  "3140",
  "3141",
  "3146",
  "3150",
  "3151",
  "3153",
  "3157",
  "3178",
  "3183",
  "3187",
  "3194",
  "3198",
  "3199",
  "3202",
  "3209",
  "3214",
  "3215",
  "3216",
  "3217",
  "3218",
  "3222",
  "3226",
  "3233",
  "3257",
  "3264",
  "3286",
  "3287",
  "3289",
  "3290",
  "3291",
  "3292",
  "3294",
  "3295",
  "3296",
  "3408",
  "3416",
  "3460",
  "3464",
  "3483",
  "3507",
  "3509",
  "3510",
  "3514",
  "3518",
  "3521",
  "3528",
  "3534",
  "3536",
  "3539",
  "3541",
  "3557",
  "3558",
  "3559",
  "3560",
  "3569",
  "3578",
  "3593",
  "3596",
  "3597",
  "3599",
  "3806",
  "3810",
  "3812",
  "3814",
  "3820",
  "3829",
  "3858",
  "5108",
  "5110",
  "5113",
  "5115",
  "5118",
  "5119",
  "5307",
  "5314",
  "5315",
  "5318",
  "5319",
  "5322",
  "5324",
  "5326",
  "5327",
  "5328",
  "5329",
  "5330",
  "5331",
  "5332",
  "5333",
  "5341",
  "5342",
  "5343",
  "5344",
  "5345",
  "5346",
  "5347",
  "5348",
  "5354",
  "5355",
  "5356",
  "5357",
  "5358",
  "5359",
  "5360",
  "5361",
  "5362",
  "5364",
  "5365",
  "5370",
  "5371",
  "5372",
  "5373",
  "5374",
  "5378",
  "5379",
  "5382",
  "5383",
  "5386",
  "5387",
  "5388",
  "5393",
  "5394",
  "5395",
  "5396",
  "5397",
  "5398",
  "5399",
  "5432",
  "5438",
  "5440",
  "5441",
  "5442",
  "5443",
  "5444",
  "5445",
  "5446",
  "5447",
  "5448",
  "5456",
  "5457",
  "5458",
  "5459",
  "5460",
  "5461",
  "5467",
  "5468",
  "5470",
  "5472",
  "5473",
  "5474",
  "5475",
  "5484",
  "5485",
  "5486",
  "5487",
  "5488",
  "5489",
  "5495",
  "5516",
  "5519",
  "5520",
  "5522",
  "5535",
  "5542",
  "5543",
  "5546",
  "5547",
  "5548",
  "5549",
  "5550",
  "5552",
  "5568",
  "5569",
  "5570",
  "5571",
  "5572",
  "5574",
  "5575",
  "5577",
  "5578",
  "5580",
  "5581",
  "5582",
  "5583",
  "5584",
  "5593",
  "5595",
  "5598",
  "5601",
  "5606",
  "5609",
  "5611",
  "5615",
  "5617",
  "5658",
  "5659",
  "5703",
  "5704",
  "7401",
  "8789",
  "8819",
  "8838",
  "8839",
  "8860",
  "8874",
  "8877",
  "8878",
  "8890",
  "8891",
  "8897",
  "8898",
  "8921",
  "8923",
  "8928",
  "8930",
  "8934",
  "8939",
  "8940",
  "8943",
  "8946",
  "8947",
  "8948",
  "8949",
  "8951",
  "8952",
  "8954",
  "8955",
  "8956",
  "8957",
  "8968",
  "8971",
  "8972",
  "8973",
  "8974",
  "8985",
  "8986",
  "8987",
  "8988",
  "8989",
  "8991",
  "8992",
  "8993",
  "8994",
  "8998",
  "8999",
  "30070",
  "30071",
  "31000",
  "31003",
  "31015",
  "31017",
  "31025",
  "31029",
  "31038",
  "31046",
  "31049",
  "31050",
  "31052",
  "31055",
  "31056",
  "31057",
  "31058",
  "31063",
  "31084",
  "31123",
  "31130",
  "31133",
  "31134",
  "31142",
  "31143",
  "31146",
  "31147",
  "31148",
  "31158",
  "31163",
  "31165",
  "31168",
  "31169",
  "31173",
  "31175",
  "31177",
  "31204",
  "31208",
  "31230",
  "31232",
  "31243",
  "31244",
  "31245",
  "31247",
  "31250",
  "31251",
  "31254",
  "31256",
  "31257",
  "31259",
  "31260",
  "31263",
  "31264",
  "31265",
  "31266",
  "31267",
  "31269",
  "31270",
  "31273",
  "31275",
  "31277",
  "31287",
  "31288",
  "31291",
  "31293",
  "31294",
  "31295",
  "31296",
  "31299",
  "31300",
  "31301",
  "31304",
  "31305",
  "31306",
  "31307",
  "31308",
  "31311",
  "31312",
  "31314",
  "31315",
  "31316",
  "31317",
  "31318",
  "31319",
  "31320",
  "31321",
  "31322",
  "31323",
  "31325",
  "31326",
  "31327",
  "31328",
  "31329",
  "31330",
  "31333",
  "31336",
  "31342",
  "31343",
  "31345",
  "31347",
  "31348",
  "31349",
  "31350",
  "31352",
  "31353",
  "31354",
  "31355",
  "31357",
  "31361",
  "31363",
  "31365",
  "31366",
  "31368",
  "31369",
  "31372",
  "31373",
  "31375",
  "31376",
  "31380",
  "31381",
  "31383",
  "31387",
  "31388",
  "31389",
  "31390",
  "31391",
  "31393",
  "31394",
  "31395",
  "31396",
  "31398",
  "31401",
  "31402",
  "31407",
  "31408",
  "31410",
  "31411",
  "31412",
  "31414",
  "31418",
  "31419",
  "31420",
  "31422",
  "31425",
  "31427",
  "31428",
  "31429",
  "31432",
  "31433",
  "31434",
  "31435",
  "31436",
  "31438",
  "31439",
  "31440",
  "31443",
  "31448",
  "31454",
  "31455",
  "31457",
  "31459",
  "31460",
  "31463",
  "31464",
  "31465",
  "31468",
  "31469",
  "31470",
  "31476",
  "31477",
  "31479",
  "31480",
  "31481",
  "31482",
  "31483",
  "31484",
  "31485",
  "31488",
  "31497",
  "31498",
  "31499",
  "31503",
  "31504",
  "31505",
  "31506",
  "31507",
  "31509",
  "31511",
  "31512",
  "31513",
  "31514",
  "31516",
  "31517",
  "31518",
  "31519",
  "31520",
  "31521",
  "31527",
  "31530",
  "31538",
  "31539",
  "31540",
  "31541",
  "31544",
  "31545",
  "31550",
  "31551",
  "31553",
  "31558",
  "31562",
  "31563",
  "31566",
  "31568",
  "31569",
  "31570",
  "31571",
  "31575",
  "31576",
  "31577",
  "31578",
  "31581",
  "31582",
  "31583",
  "31584",
  "31585",
  "31589",
  "31590",
  "31594",
  "31598",
  "31599",
  "31600",
  "31601",
  "31603",
  "31605",
  "31608",
  "31609",
  "31610",
  "31611",
  "31612",
  "31613",
  "31615",
  "31622",
  "31623",
  "31624",
  "31625",
  "31626",
  "31633",
  "31634",
  "31635",
  "31636",
  "31637",
  "31644",
  "31645",
  "31648",
  "31649",
  "31650",
  "31654",
  "31655",
  "31656",
  "31657",
  "31663",
  "31684",
  "31745",
  "31776",
  "31797",
  "31800",
  "32008",
  "32009",
  "32010",
  "32012",
  "32031",
  "34009",
  "34011",
  "34023",
  "34055",
  "34059",
  "34064",
  "34068",
  "34070",
  "34075",
  "34102",
  "34111",
  "34122",
  "34126",
  "34140",
  "34143",
  "34144",
  "34159",
  "34167",
  "34168",
  "34170",
  "34173",
  "34186",
  "34188",
  "34197",
  "34203",
  "34208",
  "34209",
  "34212",
  "34215",
  "34217",
  "34220",
  "34222",
  "34225",
  "34226",
  "34229",
  "34230",
  "34231",
  "34232",
  "34236",
  "34237",
  "34242",
  "34243",
  "34244",
  "34245",
  "34247",
  "34248",
  "34249",
  "34250",
  "34252",
  "34254",
  "34255",
  "34256",
  "34257",
  "34258",
  "34259",
  "34260",
  "34262",
  "34263",
  "34264",
  "34265",
  "34266",
  "34267",
  "34268",
  "34269",
  "34273",
  "34274",
  "34276",
  "34277",
  "34279",
  "34282",
  "34283",
  "34284",
  "34285",
  "34286",
  "34287",
  "34289",
  "34291",
  "34292",
  "34294",
  "34298",
  "34300",
  "34301",
  "34303",
  "34308",
  "34309",
  "34312",
  "34313",
  "34314",
  "34315",
  "34316",
  "34319",
  "34320",
  "34321",
  "34324",
  "34325",
  "34326",
  "34329",
  "34330",
  "34331",
  "34332",
  "34335",
  "34336",
  "34346",
  "34347",
  "34348",
  "34349",
  "34350",
  "34351",
  "34359",
  "34360",
  "34361",
  "34363",
  "34364",
  "34365",
  "34366",
  "34367",
  "34368",
  "34369",
  "34370",
  "34371",
  "34374",
  "34375",
  "34376",
  "34379",
  "34380",
  "34382",
  "34383",
  "34384",
  "34385",
  "34386",
  "34387",
  "34388",
  "34390",
  "34395",
  "34396",
  "34397",
  "34399",
  "34409",
  "34410",
  "34411",
  "34412",
  "34413",
  "34414",
  "34415",
  "34418",
  "34420",
  "34421",
  "34422",
  "34423",
  "34426",
  "34427",
  "34431",
  "34434",
  "34435",
  "34467",
  "34468",
  "34469",
  "34470",
  "34472",
  "34487",
  "34488",
  "34491",
  "34498",
  "34499",
  "34501",
  "34502",
  "34504",
  "34506",
  "34515",
  "34530",
  "34575",
  "34813",
  "34908",
  "34942",
  "35019",
  "35023",
  "35024",
  "35075",
  "35078",
  "35079",
  "35080",
  "35084",
  "35085",
  "35088",
  "35089",
  "35090",
  "35091",
  "35093",
  "35094",
  "35101",
  "35102",
  "35106",
  "35110",
  "35113",
  "35114",
  "35115",
  "35116",
  "35117",
  "35120",
  "35122",
  "35123",
  "35125",
  "35126",
  "35129",
  "35130",
  "35133",
  "35135",
  "35136",
  "35139",
  "35140",
  "35146",
  "35148",
  "35151",
  "35153",
  "35154",
  "35155",
  "35162",
  "35168",
  "35173",
  "35176",
  "35178",
  "35180",
  "53000",
  "53001",
  "53002",
  "53003",
  "53004",
  "53005",
  "53006",
  "53007",
  "53009",
  "53010",
  "53011",
  "53012",
  "53013",
  "53014",
  "53015",
  "53017",
  "53018",
  "53019",
  "53020",
  "53021",
  "53022",
  "53023",
  "53024",
  "53025",
  "53026",
  "53027",
  "53028",
  "53029",
  "53030",
  "53031",
  "53032",
  "53036",
  "53037",
  "53038",
  "53039",
  "53040",
  "53041",
  "53042",
  "53043",
  "53044",
  "53046",
  "53047",
  "53048",
  "53049",
  "53050",
  "53051",
  "53052",
  "53053",
  "53054",
  "53055",
  "53056",
  "53057",
  "53058",
  "53059",
  "53060",
  "53061",
  "53062",
  "53063",
  "53064",
  "53065",
  "53066",
  "53067",
  "53068",
  "53069",
  "53071",
  "53072",
  "53073",
  "53083",
  "53084",
  "53085",
  "53086",
  "53087",
  "53088",
  "53089",
  "53090",
  "53100",
  "53103",
  "53104",
  "53105",
  "53106",
  "53107",
  "54002",
  "54003",
  "54005",
  "54007",
  "54010",
  "54011",
  "54012",
  "54013",
  "54014",
  "54017",
  "54018",
  "54019",
  "54020",
  "54021",
  "54024",
  "54025",
  "54026",
  "54027",
  "54028",
  "54029",
  "54030",
  "54031",
  "54032",
  "54033",
  "54035",
  "54036",
  "54037",
  "54038",
  "54039",
  "54042",
  "54043",
  "54044",
  "54047",
  "54048",
  "54050",
  "54051",
  "54052",
  "54058",
  "54059",
  "54060",
  "54063",
  "54064",
  "54068",
  "54069",
  "54070",
  "54071",
  "54072",
  "54073",
  "54074",
  "54075",
  "54076",
  "54077",
  "54078",
  "54079",
  "54080",
  "54084",
  "54085",
  "54087",
  "54088",
  "54089",
  "54090",
  "54091",
  "54092",
  "54093",
  "54094",
  "54095",
  "54096",
  "54097",
  "54098",
  "54099",
  "54100",
  "54101",
  "54102",
  "54103",
  "54104",
  "54105",
  "54107",
  "54108",
  "54109",
  "54110",
  "54111",
  "54112",
  "54113",
  "54114",
  "54116",
  "54117",
  "54118",
  "54119",
  "54120",
  "54121",
  "54122",
  "54123",
  "54124",
  "54125",
  "54126",
  "54127",
  "54128",
  "54129",
  "54130",
  "54131",
  "54132",
  "54133",
  "54134",
  "54135",
  "54136",
  "54137",
  "54138",
  "54141",
  "54142",
  "54143",
  "54151",
  "54152",
  "54153",
  "54154",
  "54155",
  "54156",
  "54158",
  "54159",
  "54160",
  "54161",
  "54162",
  "54163",
  "54164",
  "54165",
  "54166",
  "54167",
  "54168",
  "54171",
  "54173",
  "54175",
  "54176",
  "54177",
  "54179",
  "54180",
  "54181",
  "54182",
  "54183",
  "54184",
  "54185",
  "54186",
  "54187",
  "54188",
  "54189",
  "54192",
  "54193",
  "54194",
  "54195",
  "54196",
  "54197",
  "54198",
  "54199",
  "54200",
  "54241",
  "54243",
  "54248",
  "54266",
  "54271",
  "54272",
  "54273",
  "55013",
  "55014",
  "55015",
  "55018",
  "55019",
  "55023",
  "55025",
  "55026",
  "55027",
  "55028",
  "55029",
  "55030",
  "55031",
  "55032",
  "55034",
  "55036",
  "55038",
  "55039",
  "55040",
  "55041",
  "55042",
  "55046",
  "55047",
  "55049",
  "55050",
  "55054",
  "55055",
  "55056",
  "55057",
  "55060",
  "55062",
  "55066",
  "55067",
  "55069",
  "55070",
  "55071",
  "55072",
  "55073",
  "55074",
  "55075",
  "55078",
  "55079",
  "55080",
  "55081",
  "55083",
  "55084",
  "55085",
  "55086",
  "55087",
  "55090",
  "55092",
  "55093",
  "55094",
  "55095",
  "55097",
  "55099",
  "55100",
  "55106",
  "55107",
  "55108",
  "55111",
  "55112",
  "55113",
  "55116",
  "55117",
  "55118",
  "55119",
  "55120",
  "55122",
  "55130",
  "55133",
  "55134",
  "55135",
  "55144",
  "55147",
  "55148",
  "55150",
  "55151",
  "55155",
  "55156",
  "55157",
  "55158",
  "55159",
  "55160",
  "55162",
  "55163",
  "55165",
  "55166",
  "55170",
  "55171",
  "55174",
  "55175",
  "55178",
  "55179",
  "55180",
  "55183",
  "55184",
  "55185",
  "55190",
  "55191",
  "55192",
  "55194",
  "55195",
  "55196",
  "55199",
  "55202",
  "55203",
  "55205",
  "55236",
  "55237",
  "55238",
  "55239",
  "55240",
  "55243",
  "55244",
  "68045",
  "80000",
  "80002",
  "80006",
  "80008",
  "80009",
  "80010",
  "80011",
  "80012",
  "80013",
  "80017",
  "80018",
  "80019",
  "80020",
  "80021",
  "80022",
  "80024",
  "80026",
  "80028",
  "80033",
  "80036",
  "80078",
  "80079",
  "80082",
  "80083",
  "80084",
  "80086",
  "80093",
  "80097",
  "80098",
  "80099",
  "80100",
  "80101",
  "80102",
  "80104",
  "80105",
  "80106",
  "80107",
  "80109",
  "80110",
  "80111",
  "80112",
  "80113",
  "80116",
  "80118",
  "80119",
  "80120",
  "80121",
  "80122",
  "80123",
  "80124",
  "80125",
  "80126",
  "80128",
  "80129",
  "80132",
  "80133",
  "80134",
  "5454C",
  "8851C",
  "8864C",
  "8892C",
  "8945C",
  "8964C",
  "8970C",
  "8975C",
  "8984C",
  "8995C",
  "8997C",
];
//Numeros largos
const numberLarge = [
  "BD5618DV",
  "BD1279DS",
  "BD2913DS",
  "BD3466DS",
  "BD2746DS",
  "BD3615DV",
  "BD4011DS",
  "BD4039DV",
  "BD4060DS",
  "BD4061DS",
  "BD4063DV",
  "BD4065DV",
  "BD4085DV",
  "BD4150DV",
  "BD4151DV",
  "BD4152DV",
  "BD4154DV",
  "BD5316DS",
  "BD5642DS",
  "BD6075DS",
  "BD6076DV",
  "BD6077DVD",
  "BD6078DV",
  "BD6081DV",
  "BD0039DV",
  "BD0041DV",
  "BD0043DVD",
  "BD0044DVT",
  "BD0045DST",
  "BD0267DV",
  "BD0673DS",
  "BD0674DV",
  "BD0904DV",
  "BD0905DV",
  "BD1725DS",
  "BD1970DV",
  "BD1971DV",
  "BD1972DV",
  "BD1973DV",
  "BD1974DTV",
  "BD1985DV",
  "BD1986DV",
  "BD2212DV",
  "BD2215DV",
  "BD2216DV",
  "BD2217DV",
  "BD2218DV",
  "BD2315DV",
  "BD3153DV",
  "BD3215DV",
  "BD3221DV",
  "BD3402DV",
  "BD3403DV",
  "BD3405DV",
  "BD3406DV",
  "BD3413DV",
  "BD3417DV",
  "BD3418DV",
  "BD3419DV",
  "BD3420DV",
  "BD3421DV",
  "BD3492DV",
  "BD3494DV",
  "BD3542DV",
  "BD3543DV",
  "BD3544DV",
  "BD3554DV",
  "BD3555DV",
  "BD3556DV",
  "BD3557DV",
  "BD3558DV",
  "BD3562DV",
  "BD3568DV",
  "BD3569DV",
  "BD3571DV",
  "BD3572DV",
  "BD4539DV",
  "BD4629DV",
  "BD4645DV",
  "BD4655DV",
  "BD4666DV",
  "BD4667DS",
  "BD4669DV",
  "BD4839DV",
  "BD5563DV",
  "BD5684DV",
  "BD5859DV",
  "BD6045DV",
  "BD6071DV",
  "BD6073DV",
  "BD6402DV",
  "BD6464DV",
  "BD6491DS",
  "BD6849DV",
  "BD9895DV",
  "BD2073DV",
  "BD7021RV",
  "BD5599DS",
  "BD9211DS",
  "BD1570DV",
  "BD3974DV",
  "BD5350T",
  "BD6037DV",
  "BD9269DV",
  "BD2000DS",
  "BD2635DV",
  "BD3002DV",
  "BD3006DV",
  "BD3063DV",
  "BD3064DV",
  "BD3608DV",
  "BD4073DV",
  "BD4622DV",
  "BD4644DV",
  "BD4648DS",
  "BD4721DV",
  "BD5086DS",
  "BD5091T",
  "BD5114DS",
  "BD5115DTV",
  "BD5117DV",
  "BD5118DS",
  "BD5121DV",
  "BD5124DV",
  "BD5125DS",
  "BD5152DV",
  "BD5153DV",
  "BD5170DV",
  "BD5173DS",
  "BD5300DV",
  "BD5329DV",
  "BD5333RV",
  "BD5346DV",
  "BD5347DV",
  "BD5357RV",
  "BD5397DV",
  "BD5790DV",
  "BD5923DV",
  "BD6043T",
  "BD6154DS",
  "BD6433DS",
  "BD6935DV",
  "BD7026DV",
  "BD7053DV",
  "BD7057DV",
  "BD8110DV",
  "BD8326DS",
  "BD9196DV",
  "BD9197DV",
  "BD9208DV",
  "BD9718DV",
  "BD3108DV",
  "BD4593T",
  "BD5206DV",
  "BD0178DV",
  "BD0356DV",
  "BD0592DS",
  "BD0920DV",
  "BD0922DV",
  "BD1650DV",
  "BD3465DTS",
  "BD4070DS",
  "BD4682DV",
  "BD4755DV",
  "BD5056DV",
  "BD5622DV",
  "BD8930T",
  "BD9600T",
  "BD9680T",
  "BD3806DS",
  "BD4696DS",
  "BD0251DV",
  "BD0252T",
  "BD0253DV",
  "BD0326DV",
  "BD1026DV",
  "BD1061DV",
  "BD1063DS",
  "BD1064DV",
  "BD1079DV",
  "BD1081DS",
  "BD1085DV",
  "BD1087DV",
  "BD1113T",
  "BD1125DV",
  "BD1413DV",
  "BD1903T",
  "BD2560DV",
  "BD3515RV",
  "BD3958DS",
  "BD3965DS",
  "BD4017DS",
  "BD4018DV",
  "BD4021DV",
  "BD4024DV",
  "BD4029DV",
  "BD4050DV",
  "BD4058DV",
  "BD4068DV",
  "BD4071DV",
  "BD4080DV",
  "BD4093DV",
  "BD4096RV",
  "BD4097DV",
  "BD4102DV",
  "BD4109DV",
  "BD4111DV",
  "BD4130DV",
  "BD4357RV",
  "BD4362DV",
  "BD4936DV",
  "BD5039RV",
  "BD5089DV",
  "BD5090DS",
  "BD5095DV",
  "BD5113DV",
  "BD5211DV",
  "BD5343DV",
  "BD5344DV",
  "BD5400DV",
  "BD5407DV",
  "BD5467DV",
  "BD5473RV",
  "BD5612DV",
  "BD5630DV",
  "BD5631DS",
  "BD5632DV",
  "BD5633DS",
  "BD5636DV",
  "BD5638T",
  "BD5643DV",
  "BD6107DV",
  "BD6187DV",
  "BD6188DV",
  "BD6189DV",
  "BD6512DV",
  "BD6513DV",
  "BD6515DV",
  "BD6516DV",
  "BD6545DV",
  "BD6548DV",
  "BD6549DS",
  "BD6629T",
  "BD6631T",
  "BD6767DV",
  "BD6784DV",
  "BD6786DV",
  "BD7201DV",
  "BD7332DV",
  "BD7726DV",
  "BD7916DV",
  "BD7917T",
  "BD7925DTV",
  "BD7928DTS",
  "BD7929T",
  "BD7930T",
  "BD7933T",
  "BD8009TR",
  "BD3268DS",
  "BD1241T",
  "BD1242TI",
  "BD1244T",
  "BD1332T",
  "BD1440DV",
  "BD1553DV",
  "BD1555T",
  "BD1557DV",
  "BD1558DS",
  "BD1559DV",
  "BD1560DS",
  "BD1564DS",
  "BD2054DV",
  "BD2055DV",
  "BD2056DV",
  "BD2068DV",
  "BD2074DV",
  "BD2095DV",
  "BD2099DS",
  "BD2376DV",
  "BD2563DV",
  "BD2564DV",
  "BD3546T",
  "BD3547DV",
  "BD3966DV",
  "BD3970DV",
  "BD4116DV",
  "BD4392DS",
  "BD4633DV",
  "BD4737RV",
  "BD4751T",
  "BD4762DV",
  "BD4804T",
  "BD4908DV",
  "BD4909T",
  "BD5028DV",
  "BD5050DV",
  "BD5054DV",
  "BD5066DV",
  "BD5067DTV",
  "BD5068DV",
  "BD5079DV",
  "BD5080DV",
  "BD5093DV",
  "BD5102DS",
  "BD5162DV",
  "BD5163DS",
  "BD5387DV",
  "BD5505DV",
  "BD5547DV",
  "BD5552DV",
  "BD5569DV",
  "BD5575RV",
  "BD5578RV",
  "BD5595DV",
  "BD5598RV",
  "BD6006DV",
  "BD6028DS",
  "BD6033T",
  "BD6051DV",
  "BD6057DV",
  "BD6058DV",
  "BD6208DS",
  "BD6213DV",
  "BD6970DS",
  "BD7879DV",
  "BD8002T",
  "BD8063T",
  "BD8338DV",
  "BD8958T",
  "BD9000DV",
  "BD9039DV",
  "BD9046DV",
  "BD9048DV",
  "BD9057DV",
  "BD9060DV",
  "BD9108DS",
  "BD9110DS",
  "BD9114DV",
  "BD9116DS",
  "BD9127DV",
  "BD9198DS",
  "BD0055DS",
  "BD0058DS",
  "BD1067DS",
  "BD1255T",
  "BD1256DV",
  "BD1257DV",
  "BD1258DS",
  "BD1260DV",
  "BD1275DV",
  "BD1276DS",
  "BD1278DV",
  "BD1700DV",
  "BD1701DV",
  "BD1703DS",
  "BD1705DV",
  "BD2510DS",
  "BD2740DS",
  "BD2911DV",
  "BD2912DV",
  "BD2914DV",
  "BD2924DV",
  "BD3900DV",
  "BD3903T",
  "BD4077DV",
  "BD4079DS",
  "BD4424DV",
  "BD4425DS",
  "BD0100DV",
  "BD0101T",
  "BD0550DV",
  "BD1008DV",
  "BD1103T",
  "BD5127DV",
  "BD5130DV",
  "BD5132T",
  "BD5174T",
  "BD5182DV",
  "BD7510DV",
  "BD6761DV",
  "BD6762DV",
  "BD6763DV",
  "BD6764DV",
  "BD0578DV",
  "BD0579DS",
  "BD5101DV",
  "BD7500DV",
  "BD0380DV",
  "BD0844DV",
  "BD0847DS",
  "BD0903DS",
  "BD1010DV",
  "BD1182DV",
  "BD1186DS",
  "BD2004DS",
  "BD2207DV",
  "BD2817DV",
  "BD6765DV",
  "BD6769DS",
  "BD6775DS",
  "BD7353DVD",
  "BD7355DV",
  "BD7356DV",
  "BD7358DV",
  "BD7362DV",
  "BD7363DV",
  "BD7364DV",
  "BD7368DV",
  "BD7369DV",
  "BD4401DV",
  "BD2063DV",
  "BD3271DS",
  "BD3272DV",
  "BD3273DV",
  "BD3274DS",
  "BD3275DS",
  "BD3276DS",
  "BD3563DV",
  "BD6036DV",
  "BD0106DS",
  "BD0107DV",
  "BD0108DV",
  "BD0109DS",
  "BD0113DV",
  "BD0114T",
  "BD0117DV",
  "BD0119DS",
  "BD0120DV",
  "BD0121DV",
  "BD0122DV",
  "BD0183DS",
  "BD0184DS",
  "BD0185DV",
  "BD0187DV",
  "BD0190DV",
  "BD0191DS",
  "BD0192DV",
  "BD0408DVD",
  "BD0410DV",
  "BD0411DV",
  "BD0412DS",
  "BD0413DS",
  "BD0414DV",
  "BD0415DV",
  "BD0416DS",
  "BD0429DV",
  "BD0431DV",
  "BD0433DV",
  "BD0438DV",
  "BD0441DV",
  "BD0612DV",
  "BD0812DV",
  "BD0906DV",
  "BD0910DV",
  "BD1018DVD",
  "BD2412DV",
  "BD2593DV",
  "BD3053DV",
  "BD3054DV",
  "BD3182DV",
  "BD3412DS",
  "BD3496DV",
  "BD3504DV",
  "BD3505DS",
  "BD3506DV",
  "BD3507DV",
  "BD3508DST",
  "BD3509DV",
  "BD3604DV",
  "BD3605 DV",
  "BD3612DV",
  "BD3616DV",
  "BD4210DV",
  "BD4230DS",
  "BD4291DV",
  "BD5038DV",
  "BD5558DV",
  "BD6465DV",
  "BD6466DV",
  "BD6468DV",
  "BD6472DV",
  "BD6473DV",
  "BD6474DS",
  "BD6475DV",
  "BD6476DV",
  "BD6477DS",
  "BD6478DV",
  "BD6484DV",
  "BD6485DV",
  "BD6486DS",
  "BD0181DV",
  "BD1982DV",
  "BD0046DV",
  "BD2891DV",
  "BD2893DV",
  "BD2898DVD",
  "BD2899DS",
  "BD8570DV",
  "BD9062DV",
  "BD9066DV",
  "BD9067DS",
  "BD8571DS",
  "BD4650DS",
  "BD4664DV",
  "BD5399DV",
  "BD5924DV",
  "BD7019DV",
  "BD7020T",
  "BD7030DV",
  "BD7040T",
  "BD7113DV",
  "BD7114DV",
  "BD7116DV",
  "BD8067DV",
  "BD8107DV",
  "BD9284",
  "BD0015T",
  "BD0022T",
  "BD0206DV",
  "BD0601DV",
  "BD0602DV",
  "BD1057DV",
  "BD1158DV",
  "BD2057DV",
  "BD2059DV",
  "BD2067DV",
  "BD2070DV",
  "BD2071DV",
  "BD2083DS",
  "BD2772DV",
  "BD2829DV",
  "BD2931DS",
  "BD2939DV",
  "BD3030T",
  "BD3536T",
  "BD3550DV",
  "BD4003DV",
  "BD4107DV",
  "BD4198DV",
  "BD4202T",
  "BD4203DV",
  "BD4205DV",
  "BD4206DV",
  "BD4207DV",
  "BD4208DV",
  "BD4213DV",
  "BD4378T",
  "BD4707DS",
  "BD4738DV",
  "BD4739T",
  "BD4740DV",
  "BD4741T",
  "BD4758DV",
  "BD4759T",
  "BD5205DV",
  "BD5402DV",
  "BD5800DV",
  "BD6013DV",
  "BD6031DV",
  "BD6572DV",
  "BD6800DV",
  "BD7101DV",
  "BD7794DV",
  "BD7795DV",
  "BD7823DS",
  "BD8120DS",
  "BD9901DS",
  "BD4247DS",
  "BD4298DS",
  "BD4608DV",
  "BD4694DV",
  "BD4697DV",
  "BD4698DV",
  "BD4724T",
  "BD4726T",
  "BD4735T",
  "BD4744DTS",
  "BD4746DS",
  "BD4750DV",
  "BD4752DV",
  "BD5023DS",
  "BD4745DS",
  "BD6209DV",
  "BD6210DS",
  "BD3321DV",
  "BD3323DV",
  "BD3324DV",
  "BD3326DV",
  "BD3327DV",
  "BD3328DV",
  "BD3345DV",
  "BD3346DV",
  "BD0511T",
  "BD2233DV",
  "BD2234DV",
  "BD4009DV",
  "BD4022DV",
  "BD4023DS",
  "BD4026DS",
  "BD4038T",
  "BD4040T",
  "BD4296DS",
  "BD4304DV",
  "BD4901DS",
  "BD5006DTS",
  "BD5843DV",
  "BD6845DV",
  "BD6846TR",
  "BD6947DV",
  "BD7829DV",
  "BD7897DV",
  "BD7898DS",
  "BD8078DS",
  "BD9322T",
  "BD9047DV",
  "BD9210DS",
  "BD9615T",
  "BD4702DV",
  "BD7033DS",
  "BD7080DV",
  "BD0600DV",
  "BD4801DV",
  "BD4802DV",
  "BD4803DV",
  "BD6010DV",
  "BD6035DV",
  "BD6041DV",
  "BD6049T",
  "BD6052DS",
  "BD0310T",
  "BD1266DVD",
  "BD1269DV",
  "BD1270DV",
  "BD2038DV",
  "BD2049DS",
  "BD2820DV",
  "BD2878DV",
  "BD2881DV",
  "BD2882DS",
  "BD2884DV",
  "BD2895T",
  "BD2918DV",
  "BD2919DV",
  "BD2933DS",
  "BD2934DS",
  "BD3107DV",
  "BD3303DS",
  "BD3304DV",
  "BD4020DV",
  "BD4113DV",
  "BD4115T",
  "BD4125DV",
  "BD4126DS",
  "BD4128DS",
  "BD4132T",
  "BD4211DV",
  "BD4212T",
  "BD4406DV",
  "BD4414T",
  "BD4443T",
  "BD5191T",
  "BD5210RV",
  "BD5441DV",
  "BD5442DS",
  "BD6090DV",
  "BD6190DV",
  "BD1093DV",
  "BD1300T",
  "BD1511T",
  "BD1512T",
  "BD1513T",
  "BD1514TT",
  "BD1516T",
  "BD1530DV",
  "BD3011DTS",
  "BD3015DV",
  "BD3021DV",
  "BD3111DS",
  "BD3300DS",
  "BD3344DV",
  "BD3392DS",
  "BD3393DS",
  "BD3790DV",
  "BD3791DS",
  "BD3975DV",
  "BD4082DV",
  "BD4083DV",
  "BD4972DTS",
  "BD5297DV",
  "BD5298DV",
  "BD5299T",
  "BD5306DV",
  "BD5308DV",
  "BD5310DS",
  "BD5601DS",
  "BD5602DV",
  "BD5603DV",
  "BD5604DV",
  "BD5605DV",
  "BD5608DS",
  "BD5614DV",
  "BD5615DV",
  "BD5616DS",
  " ",
  "BD5619DS",
  "BD5620DV",
  "BD5637DS",
  "BD5639T",
  "BD5640DS",
  "BD6095DV",
  "BD6153DV",
  "BD6284T",
  "BD6382DV",
  "BD6383T",
  "BD9611DV",
  "BD9617T",
  "BD9618T",
  "BD1181DV",
  "BD2940DS",
  "BD6074DV",
  "BD7290DV",
  "BD7297DV",
  "BD7301DV",
  "BD7302DV",
  "BD7304DV",
  "BD7305DV",
  "BD8027DV",
  "BD5596T",
  "BD6085DV",
  "BD9613DS",
  "BD9614DV",
  "BD9619DV",
];

//Numeros cortos DV
const numberCortsDV = [
  "BD3615",
  "BD4039",
  "BD4063",
  "BD4065",
  "BD4085",
  "BD4150",
  "BD4151",
  "BD4152",
  "BD4154",
  "BD6076",
  "BD6078",
  "BD6081",
  "BD0039",
  "BD0041",
  "BD0267",
  "BD0674",
  "BD0904",
  "BD0905",
  "BD1970",
  "BD1971",
  "BD1972",
  "BD1973",
  "BD1985",
  "BD1986",
  "BD2212",
  "BD2215",
  "BD2216",
  "BD2217",
  "BD2218",
  "BD2315",
  "BD3153",
  "BD3215",
  "BD3221",
  "BD3402",
  "BD3403",
  "BD3405",
  "BD3406",
  "BD3413",
  "BD3417",
  "BD3418",
  "BD3419",
  "BD3420",
  "BD3421",
  "BD3492",
  "BD3494",
  "BD3542",
  "BD3543",
  "BD3544",
  "BD3554",
  "BD3555",
  "BD3556",
  "BD3557",
  "BD3558",
  "BD3562",
  "BD3568",
  "BD3569",
  "BD3571",
  "BD3572",
  "BD4539",
  "BD4629",
  "BD4645",
  "BD4655",
  "BD4666",
  "BD4669",
  "BD4839",
  "BD5563",
  "BD5684",
  "BD5859",
  "BD6045",
  "BD6071",
  "BD6073",
  "BD6402",
  "BD6464",
  "BD6849",
  "BD9895",
  "BD2073",
  "BD1570",
  "BD3974",
  "BD6037",
  "BD9269",
  "BD2635",
  "BD3002",
  "BD3006",
  "BD3063",
  "BD3064",
  "BD3608",
  "BD4073",
  "BD4622",
  "BD4644",
  "BD4721",
  "BD5117",
  "BD5121",
  "BD5124",
  "BD5152",
  "BD5153",
  "BD5170",
  "BD5300",
  "BD5329",
  "BD5346",
  "BD5347",
  "BD5397",
  "BD5790",
  "BD5923",
  "BD6935",
  "BD7026",
  "BD7053",
  "BD7057",
  "BD8110",
  "BD9196",
  "BD9197",
  "BD9208",
  "BD9718",
  "BD3108",
  "BD5206",
  "BD0178",
  "BD0356",
  "BD0920",
  "BD0922",
  "BD1650",
  "BD4682",
  "BD4755",
  "BD5056",
  "BD5622",
  "BD0251",
  "BD0253",
  "BD0326",
  "BD1026",
  "BD1061",
  "BD1064",
  "BD1079",
  "BD1085",
  "BD1087",
  "BD1125",
  "BD1413",
  "BD2560",
  "BD4018",
  "BD4021",
  "BD4024",
  "BD4029",
  "BD4050",
  "BD4058",
  "BD4068",
  "BD4071",
  "BD4080",
  "BD4093",
  "BD4097",
  "BD4102",
  "BD4109",
  "BD4111",
  "BD4130",
  "BD4362",
  "BD4936",
  "BD5089",
  "BD5095",
  "BD5113",
  "BD5211",
  "BD5343",
  "BD5344",
  "BD5400",
  "BD5407",
  "BD5467",
  "BD5612",
  "BD5630",
  "BD5632",
  "BD5636",
  "BD5643",
  "BD6107",
  "BD6187",
  "BD6188",
  "BD6189",
  "BD6512",
  "BD6513",
  "BD6515",
  "BD6516",
  "BD6545",
  "BD6548",
  "BD6767",
  "BD6784",
  "BD6786",
  "BD7201",
  "BD7332",
  "BD7726",
  "BD7916",
  "BD1440",
  "BD1553",
  "BD1557",
  "BD1559",
  "BD2054",
  "BD2055",
  "BD2056",
  "BD2068",
  "BD2074",
  "BD2095",
  "BD2376",
  "BD2563",
  "BD2564",
  "BD3547",
  "BD3966",
  "BD3970",
  "BD4116",
  "BD4633",
  "BD4762",
  "BD4908",
  "BD5028",
  "BD5050",
  "BD5054",
  "BD5066",
  "BD5068",
  "BD5079",
  "BD5080",
  "BD5093",
  "BD5162",
  "BD5387",
  "BD5505",
  "BD5547",
  "BD5552",
  "BD5569",
  "BD5595",
  "BD6006",
  "BD6051",
  "BD6057",
  "BD6058",
  "BD6213",
  "BD7879",
  "BD8338",
  "BD9000",
  "BD9039",
  "BD9046",
  "BD9048",
  "BD9057",
  "BD9060",
  "BD9114",
  "BD9127",
  "BD1256",
  "BD1257",
  "BD1260",
  "BD1275",
  "BD1278",
  "BD1700",
  "BD1701",
  "BD1705",
  "BD2911",
  "BD2912",
  "BD2914",
  "BD2924",
  "BD3900",
  "BD4077",
  "BD4424",
  "BD0100",
  "BD0550",
  "BD1008",
  "BD5127",
  "BD5130",
  "BD5182",
  "BD7510",
  "BD6761",
  "BD6762",
  "BD6763",
  "BD6764",
  "BD0578",
  "BD5101",
  "BD7500",
  "BD0380",
  "BD0844",
  "BD1010",
  "BD1182",
  "BD2207",
  "BD2817",
  "BD6765",
  "BD7355",
  "BD7356",
  "BD7358",
  "BD7362",
  "BD7363",
  "BD7364",
  "BD7368",
  "BD7369",
  "BD4401",
  "BD2063",
  "BD3272",
  "BD3273",
  "BD3563",
  "BD6036",
  "BD0107",
  "BD0108",
  "BD0113",
  "BD0117",
  "BD0120",
  "BD0121",
  "BD0122",
  "BD0185",
  "BD0187",
  "BD0190",
  "BD0192",
  "BD0410",
  "BD0411",
  "BD0414",
  "BD0415",
  "BD0429",
  "BD0431",
  "BD0433",
  "BD0438",
  "BD0441",
  "BD0612",
  "BD0812",
  "BD0906",
  "BD0910",
  "BD2412",
  "BD2593",
  "BD3053",
  "BD3054",
  "BD3182",
  "BD3496",
  "BD3504",
  "BD3506",
  "BD3507",
  "BD3509",
  "BD3604",
  "BD3605",
  "BD3612",
  "BD3616",
  "BD4210",
  "BD4291",
  "BD5038",
  "BD5558",
  "BD6465",
  "BD6466",
  "BD6468",
  "BD6472",
  "BD6473",
  "BD6475",
  "BD6476",
  "BD6478",
  "BD6484",
  "BD6485",
  "BD0181",
  "BD1982",
  "BD0046",
  "BD2891",
  "BD2893",
  "BD8570",
  "BD9062",
  "BD9066",
  "BD4664",
  "BD5399",
  "BD5924",
  "BD7019",
  "BD7030",
  "BD7113",
  "BD7114",
  "BD7116",
  "BD8067",
  "BD8107",
  "BD0206",
  "BD0601",
  "BD0602",
  "BD1057",
  "BD1158",
  "BD2057",
  "BD2059",
  "BD2067",
  "BD2070",
  "BD2071",
  "BD2772",
  "BD2829",
  "BD2939",
  "BD3550",
  "BD4003",
  "BD4107",
  "BD4198",
  "BD4203",
  "BD4205",
  "BD4206",
  "BD4207",
  "BD4208",
  "BD4213",
  "BD4738",
  "BD4740",
  "BD4758",
  "BD5205",
  "BD5402",
  "BD5800",
  "BD6013",
  "BD6031",
  "BD6572",
  "BD6800",
  "BD7101",
  "BD7794",
  "BD7795",
  "BD4608",
  "BD4694",
  "BD4697",
  "BD4698",
  "BD4750",
  "BD4752",
  "BD6209",
  "BD3321",
  "BD3323",
  "BD3324",
  "BD3326",
  "BD3327",
  "BD3328",
  "BD3345",
  "BD3346",
  "BD2233",
  "BD2234",
  "BD4009",
  "BD4022",
  "BD4304",
  "BD5843",
  "BD6845",
  "BD6947",
  "BD7829",
  "BD7897",
  "BD9047",
  "BD4702",
  "BD7080",
  "BD0600",
  "BD4801",
  "BD4802",
  "BD4803",
  "BD6010",
  "BD6035",
  "BD6041",
  "BD1269",
  "BD1270",
  "BD2038",
  "BD2820",
  "BD2878",
  "BD2881",
  "BD2884",
  "BD2918",
  "BD2919",
  "BD3107",
  "BD3304",
  "BD4020",
  "BD4113",
  "BD4125",
  "BD4211",
  "BD4406",
  "BD5441",
  "BD6090",
  "BD6190",
  "BD1093",
  "BD1530",
  "BD3015",
  "BD3021",
  "BD3344",
  "BD3790",
  "BD3975",
  "BD4082",
  "BD4083",
  "BD5297",
  "BD5298",
  "BD5306",
  "BD5308",
  "BD5602",
  "BD5603",
  "BD5604",
  "BD5605",
  "BD5614",
  "BD5615",
  "BD5620",
  "BD6095",
  "BD6153",
  "BD6382",
  "BD9611",
  "BD1181",
  "BD6074",
  "BD7290",
  "BD7297",
  "BD7301",
  "BD7302",
  "BD7304",
  "BD7305",
  "BD8027",
  "BD6085",
  "BD9614",
  "BD9619",
];

//Numeros cortos DS
const numberCortsDS = [
  "BD1279",
  "BD2913",
  "BD3466",
  "BD2746",
  "BD4011",
  "BD4060",
  "BD4061",
  "BD5316",
  "BD5642",
  "BD6075",
  "BD0673",
  "BD1725",
  "BD4667",
  "BD6491",
  "BD5599",
  "BD9211",
  "BD2000",
  "BD4648",
  "BD5086",
  "BD5114",
  "BD5118",
  "BD5125",
  "BD5173",
  "BD6154",
  "BD6433",
  "BD8326",
  "BD0592",
  "BD4070",
  "BD3806",
  "BD4696",
  "BD1063",
  "BD1081",
  "BD3958",
  "BD3965",
  "BD4017",
  "BD5090",
  "BD5631",
  "BD5633",
  "BD6549",
  "BD3268",
  "BD1558",
  "BD1560",
  "BD1564",
  "BD2099",
  "BD4392",
  "BD5102",
  "BD5163",
  "BD6028",
  "BD6208",
  "BD6970",
  "BD9108",
  "BD9110",
  "BD9116",
  "BD9198",
  "BD0055",
  "BD0058",
  "BD1067",
  "BD1258",
  "BD1276",
  "BD1703",
  "BD2510",
  "BD2740",
  "BD4079",
  "BD4425",
  "BD0579",
  "BD0847",
  "BD0903",
  "BD1186",
  "BD2004",
  "BD6769",
  "BD6775",
  "BD3271",
  "BD3274",
  "BD3275",
  "BD3276",
  "BD0106",
  "BD0109",
  "BD0119",
  "BD0183",
  "BD0184",
  "BD0191",
  "BD0412",
  "BD0413",
  "BD0416",
  "BD3412",
  "BD3505",
  "BD4230",
  "BD6474",
  "BD6477",
  "BD6486",
  "BD2899",
  "BD9067",
  "BD8571",
  "BD4650",
  "BD2083",
  "BD2931",
  "BD4707",
  "BD7823",
  "BD8120",
  "BD9901",
  "BD4247",
  "BD4298",
  "BD4746",
  "BD5023",
  "BD4745",
  "BD6210",
  "BD4023",
  "BD4026",
  "BD4296",
  "BD4901",
  "BD7898",
  "BD8078",
  "BD9210",
  "BD7033",
  "BD6052",
  "BD2049",
  "BD2882",
  "BD2933",
  "BD2934",
  "BD3303",
  "BD4126",
  "BD4128",
  "BD5442",
  "BD3111",
  "BD3300",
  "BD3392",
  "BD3393",
  "BD3791",
  "BD5310",
  "BD5601",
  "BD5608",
  "BD5616",
  "BD5619",
  "BD5637",
  "BD5640",
  "BD2940",
  "BD9613",
];

//Numeros mas cortos Dv
const numberMinDV = [
  "3615",
  "4039",
  "4063",
  "4065",
  "4085",
  "4150",
  "4151",
  "4152",
  "4154",
  "6076",
  "6078",
  "6081",
  "0039",
  "0041",
  "0267",
  "0674",
  "0904",
  "0905",
  "1970",
  "1971",
  "1972",
  "1973",
  "1985",
  "1986",
  "2212",
  "2215",
  "2216",
  "2217",
  "2218",
  "2315",
  "3153",
  "3215",
  "3221",
  "3402",
  "3403",
  "3405",
  "3406",
  "3413",
  "3417",
  "3418",
  "3419",
  "3420",
  "3421",
  "3492",
  "3494",
  "3542",
  "3543",
  "3544",
  "3554",
  "3555",
  "3556",
  "3557",
  "3558",
  "3562",
  "3568",
  "3569",
  "3571",
  "3572",
  "4539",
  "4629",
  "4645",
  "4655",
  "4666",
  "4669",
  "4839",
  "5563",
  "5684",
  "5859",
  "6045",
  "6071",
  "6073",
  "6402",
  "6464",
  "6849",
  "9895",
  "2073",
  "1570",
  "3974",
  "6037",
  "9269",
  "2635",
  "3002",
  "3006",
  "3063",
  "3064",
  "3608",
  "4073",
  "4622",
  "4644",
  "4721",
  "5117",
  "5121",
  "5124",
  "5152",
  "5153",
  "5170",
  "5300",
  "5329",
  "5346",
  "5347",
  "5397",
  "5790",
  "5923",
  "6935",
  "7026",
  "7053",
  "7057",
  "8110",
  "9196",
  "9197",
  "9208",
  "9718",
  "3108",
  "5206",
  "0178",
  "0356",
  "0920",
  "0922",
  "1650",
  "4682",
  "4755",
  "5056",
  "5622",
  "0251",
  "0253",
  "0326",
  "1026",
  "1061",
  "1064",
  "1079",
  "1085",
  "1087",
  "1125",
  "1413",
  "2560",
  "4018",
  "4021",
  "4024",
  "4029",
  "4050",
  "4058",
  "4068",
  "4071",
  "4080",
  "4093",
  "4097",
  "4102",
  "4109",
  "4111",
  "4130",
  "4362",
  "4936",
  "5089",
  "5095",
  "5113",
  "5211",
  "5343",
  "5344",
  "5400",
  "5407",
  "5467",
  "5612",
  "5630",
  "5632",
  "5636",
  "5643",
  "6107",
  "6187",
  "6188",
  "6189",
  "6512",
  "6513",
  "6515",
  "6516",
  "6545",
  "6548",
  "6767",
  "6784",
  "6786",
  "7201",
  "7332",
  "7726",
  "7916",
  "1440",
  "1553",
  "1557",
  "1559",
  "2054",
  "2055",
  "2056",
  "2068",
  "2074",
  "2095",
  "2376",
  "2563",
  "2564",
  "3547",
  "3966",
  "3970",
  "4116",
  "4633",
  "4762",
  "4908",
  "5028",
  "5050",
  "5054",
  "5066",
  "5068",
  "5079",
  "5080",
  "5093",
  "5162",
  "5387",
  "5505",
  "5547",
  "5552",
  "5569",
  "5595",
  "6006",
  "6051",
  "6057",
  "6058",
  "6213",
  "7879",
  "8338",
  "9000",
  "9039",
  "9046",
  "9048",
  "9057",
  "9060",
  "9114",
  "9127",
  "1256",
  "1257",
  "1260",
  "1275",
  "1278",
  "1700",
  "1701",
  "1705",
  "2911",
  "2912",
  "2914",
  "2924",
  "3900",
  "4077",
  "4424",
  "0100",
  "0550",
  "1008",
  "5127",
  "5130",
  "5182",
  "7510",
  "6761",
  "6762",
  "6763",
  "6764",
  "0578",
  "5101",
  "7500",
  "0380",
  "0844",
  "1010",
  "1182",
  "2207",
  "2817",
  "6765",
  "7355",
  "7356",
  "7358",
  "7362",
  "7363",
  "7364",
  "7368",
  "7369",
  "4401",
  "2063",
  "3272",
  "3273",
  "3563",
  "6036",
  "0107",
  "0108",
  "0113",
  "0117",
  "0120",
  "0121",
  "0122",
  "0185",
  "0187",
  "0190",
  "0192",
  "0410",
  "0411",
  "0414",
  "0415",
  "0429",
  "0431",
  "0433",
  "0438",
  "0441",
  "0612",
  "0812",
  "0906",
  "0910",
  "2412",
  "2593",
  "3053",
  "3054",
  "3182",
  "3496",
  "3504",
  "3506",
  "3507",
  "3509",
  "3604",
  "3605",
  "3612",
  "3616",
  "4210",
  "4291",
  "5038",
  "5558",
  "6465",
  "6466",
  "6468",
  "6472",
  "6473",
  "6475",
  "6476",
  "6478",
  "6484",
  "6485",
  "0181",
  "1982",
  "0046",
  "2891",
  "2893",
  "8570",
  "9062",
  "9066",
  "4664",
  "5399",
  "5924",
  "7019",
  "7030",
  "7113",
  "7114",
  "7116",
  "8067",
  "8107",
  "0206",
  "0601",
  "0602",
  "1057",
  "1158",
  "2057",
  "2059",
  "2067",
  "2070",
  "2071",
  "2772",
  "2829",
  "2939",
  "3550",
  "4003",
  "4107",
  "4198",
  "4203",
  "4205",
  "4206",
  "4207",
  "4208",
  "4213",
  "4738",
  "4740",
  "4758",
  "5205",
  "5402",
  "5800",
  "6013",
  "6031",
  "6572",
  "6800",
  "7101",
  "7794",
  "7795",
  "4608",
  "4694",
  "4697",
  "4698",
  "4750",
  "4752",
  "6209",
  "3321",
  "3323",
  "3324",
  "3326",
  "3327",
  "3328",
  "3345",
  "3346",
  "2233",
  "2234",
  "4009",
  "4022",
  "4304",
  "5843",
  "6845",
  "6947",
  "7829",
  "7897",
  "9047",
  "4702",
  "7080",
  "0600",
  "4801",
  "4802",
  "4803",
  "6010",
  "6035",
  "6041",
  "1269",
  "1270",
  "2038",
  "2820",
  "2878",
  "2881",
  "2884",
  "2918",
  "2919",
  "3107",
  "3304",
  "4020",
  "4113",
  "4125",
  "4211",
  "4406",
  "5441",
  "6090",
  "6190",
  "1093",
  "1530",
  "3015",
  "3021",
  "3344",
  "3790",
  "3975",
  "4082",
  "4083",
  "5297",
  "5298",
  "5306",
  "5308",
  "5602",
  "5603",
  "5604",
  "5605",
  "5614",
  "5615",
  "5620",
  "6095",
  "6153",
  "6382",
  "9611",
  "1181",
  "6074",
  "7290",
  "7297",
  "7301",
  "7302",
  "7304",
  "7305",
  "8027",
  "6085",
  "9614",
  "9619",
];

//Numeros mas cortos DS
const numberMinDS = [
  "1279",
  "2913",
  "3466",
  "2746",
  "4011",
  "4060",
  "4061",
  "5316",
  "5642",
  "6075",
  "0673",
  "1725",
  "4667",
  "6491",
  "5599",
  "9211",
  "2000",
  "4648",
  "5086",
  "5114",
  "5118",
  "5125",
  "5173",
  "6154",
  "6433",
  "8326",
  "0592",
  "4070",
  "3806",
  "4696",
  "1063",
  "1081",
  "3958",
  "3965",
  "4017",
  "5090",
  "5631",
  "5633",
  "6549",
  "3268",
  "1558",
  "1560",
  "1564",
  "2099",
  "4392",
  "5102",
  "5163",
  "6028",
  "6208",
  "6970",
  "9108",
  "9110",
  "9116",
  "9198",
  "0055",
  "0058",
  "1067",
  "1258",
  "1276",
  "1703",
  "2510",
  "2740",
  "4079",
  "4425",
  "0579",
  "0847",
  "0903",
  "1186",
  "2004",
  "6769",
  "6775",
  "3271",
  "3274",
  "3275",
  "3276",
  "0106",
  "0109",
  "0119",
  "0183",
  "0184",
  "0191",
  "0412",
  "0413",
  "0416",
  "3412",
  "3505",
  "4230",
  "6474",
  "6477",
  "6486",
  "2899",
  "9067",
  "8571",
  "4650",
  "2083",
  "2931",
  "4707",
  "7823",
  "8120",
  "9901",
  "4247",
  "4298",
  "4746",
  "5023",
  "4745",
  "6210",
  "4023",
  "4026",
  "4296",
  "4901",
  "7898",
  "8078",
  "9210",
  "7033",
  "6052",
  "2049",
  "2882",
  "2933",
  "2934",
  "3303",
  "4126",
  "4128",
  "5442",
  "3111",
  "3300",
  "3392",
  "3393",
  "3791",
  "5310",
  "5601",
  "5608",
  "5616",
  "5619",
  "5637",
  "5640",
  "2940",
  "9613",
];

//Numeros largos Discos
const bremLarge = [
  "08.2275.10",
  "08.2536.10",
  "08.2691.10",
  "08.4177.10",
  "08.4177.75",
  "08.4250.10",
  "08.4738.21",
  "08.4931.20",
  "08.4931.21",
  "08.4931.2X",
  "08.4932.10",
  "08.5005.10",
  "08.5085.11",
  "08.5086.11",
  "08.5149.10",
  "08.5178.30",
  "08.5178.31",
  "08.5266.10",
  "08.5334.10",
  "08.5334.11",
  "08.5334.1X",
  "08.5359.10",
  "08.5359.11",
  "08.5366.20",
  "08.5366.21",
  "08.5366.76",
  "08.5443.10",
  "08.5443.60",
  "08.5719.10",
  "08.5743.10",
  "08.5743.11",
  "08.5803.20",
  "08.5803.80",
  "08.5834.25",
  "08.6768.10",
  "08.6838.10",
  "08.6838.11",
  "08.6853.80",
  "08.6853.81",
  "08.6897.11",
  "08.6899.10",
  "08.6903.10",
  "08.6911.10",
  "08.6931.10",
  "08.6931.11",
  "08.6935.10",
  "08.6935.11",
  "08.7019.80",
  "08.7019.81",
  "08.7042.10",
  "08.7042.11",
  "08.7104.10",
  "08.7165.10",
  "08.7165.1X",
  "08.7165.21",
  "08.7165.75",
  "08.7211.20",
  "08.7211.21",
  "08.7288.10",
  "08.7288.11",
  "08.7351.10",
  "08.7518.80",
  "08.7607.10",
  "08.7607.11",
  "08.7626.10",
  "08.7626.11",
  "08.7627.10",
  "08.7627.11",
  "08.7724.10",
  "08.7725.10",
  "08.7725.20",
  "08.7765.10",
  "08.7765.11",
  "08.7811.10",
  "08.7822.10",
  "08.7936.11",
  "08.7984.10",
  "08.7997.10",
  "08.8065.10",
  "08.8094.50",
  "08.8094.60",
  "08.8163.10",
  "08.8163.20",
  "08.8214.80",
  "08.8214.81",
  "08.8264.80",
  "08.8305.10",
  "08.8316.20",
  "08.8405.10",
  "08.8405.11",
  "08.8408.11",
  "08.8445.80",
  "08.8463.10",
  "08.8463.11",
  "08.8843.21",
  "08.8868.20",
  "08.8974.10",
  "08.8994.80",
  "08.9083.10",
  "08.9083.11",
  "08.9084.11",
  "08.9107.10",
  "08.9107.11",
  "08.9163.10",
  "08.9163.1X",
  "08.9163.75",
  "08.9179.10",
  "08.9460.41",
  "08.9488.10",
  "08.9488.11",
  "08.9502.10",
  "08.9502.1X",
  "08.9509.10",
  "08.9511.10",
  "08.9512.27",
  "08.9580.11",
  "08.9584.11",
  "08.9597.17",
  "08.9729.11",
  "08.9734.11",
  "08.9787.11",
  "08.9918.20",
  "08.9918.21",
  "08.9975.10",
  "08.9975.11",
  "08.9975.20",
  "08.9975.21",
  "08.9975.2X",
  "08.A029.10",
  "08.A029.11",
  "08.A029.11",
  "08.A029.20",
  "08.A108.10",
  "08.A108.11",
  "08.A112.11",
  "08.A114.20",
  "08.A114.30",
  "08.A114.31",
  "08.A122.10",
  "08.A135.17",
  "08.A147.10",
  "08.A147.11",
  "08.A147.1X",
  "08.A202.10",
  "08.A202.11",
  "08.A202.1X",
  "08.A205.10",
  "08.A205.11",
  "08.A268.10",
  "08.A274.10",
  "08.A332.11",
  "08.A333.10",
  "08.A351.10",
  "08.A351.11",
  "08.A355.11",
  "08.A403.10",
  "08.A403.11",
  "08.A429.10",
  "08.A429.11",
  "08.A446.11",
  "08.A533.10",
  "08.A533.11",
  "08.A534.30",
  "08.A534.31",
  "08.A540.11",
  "08.A602.10",
  "08.A612.40",
  "08.A612.41",
  "08.A636.10",
  "08.A636.11",
  "08.A708.10",
  "08.A715.10",
  "08.A725.10",
  "08.A725.11",
  "08.A729.17",
  "08.A730.10",
  "08.A737.11",
  "08.A755.10",
  "08.A759.10",
  "08.A759.11",
  "08.A759.1X",
  "08.A863.11",
  "08.A869.10",
  "08.A869.11",
  "08.A871.11",
  "08.A872.11",
  "08.A957.11",
  "08.A970.11",
  "08.B029.10",
  "08.B271.11",
  "08.B347.41",
  "08.B348.41",
  "08.B357.10",
  "08.B412.10",
  "08.B412.11",
  "08.B413.10",
  "08.B413.11",
  "08.B413.1X",
  "08.B437.10",
  "08.B437.11",
  "08.B443.10",
  "08.B449.10",
  "08.B449.11",
  "08.B464.10",
  "08.B464.11",
  "08.B529.11",
  "08.B529.20",
  "08.B529.21",
  "08.B566.10",
  "08.B566.11",
  "08.B566.21",
  "08.B568.10",
  "08.B568.11",
  "08.B568.11",
  "08.B584.10",
  "08.B590.10",
  "08.B590.11",
  "08.B600.10",
  "08.B600.11",
  "08.B601.10",
  "08.B602.10",
  "08.B603.10",
  "08.B605.11",
  "08.B649.11",
  "08.B662.10",
  "08.B992.10",
  "08.C046.11",
  "08.C083.10",
  "08.C115.11",
  "08.C172.10",
  "08.C172.1X",
  "08.C172.21",
  "08.C208.11",
  "08.C247.10",
  "08.C252.11",
  "08.C276.10",
  "08.C307.11",
  "08.C308.11",
  "08.C352.11",
  "08.C423.11",
  "08.C425.11",
  "08.C501.11",
  "08.C653.11",
  "08.C659.11",
  "08.C661.11",
  "08.D222.11",
  "08.D278.11",
  "08.D281.10",
  "08.D326.10",
  "08.D326.11",
  "08.D530.13",
  "08.N123.10",
  "08.N226.10",
  "08.N258.21",
  "08.R101.11",
  "09.3090.10",
  "09.3090.1X",
  "09.3090.20",
  "09.3090.75",
  "09.4765.10",
  "09.4869.41",
  "09.4939.10",
  "09.4939.11",
  "09.4939.20",
  "09.4939.21",
  "09.4939.30",
  "09.4939.31",
  "09.4987.20",
  "09.4987.21",
  "09.5055.10",
  "09.5059.10",
  "09.5084.20",
  "09.5101.10",
  "09.5166.10",
  "09.5166.75",
  "09.5173.10",
  "09.5196.10",
  "09.5196.11",
  "09.5253.10",
  "09.5254.10",
  "09.5254.20",
  "09.5254.21",
  "09.5255.10",
  "09.5285.10",
  "09.5290.10",
  "09.5390.30",
  "09.5390.77",
  "09.5449.10",
  "09.5457.30",
  "09.5457.31",
  "09.5457.3X",
  "09.5509.11",
  "09.5527.20",
  "09.5579.21",
  "09.5581.30",
  "09.5584.10",
  "09.5640.10",
  "09.5640.11",
  "09.5640.30",
  "09.5707.10",
  "09.5708.10",
  "09.5736.10",
  "09.5745.2X",
  "09.5801.10",
  "09.5802.20",
  "09.5802.2X",
  "09.5802.76",
  "09.5843.10",
  "09.5843.30",
  "09.5843.31",
  "09.5870.10",
  "09.6665.11",
  "09.6727.10",
  "09.6727.30",
  "09.6727.77",
  "09.6744.10",
  "09.6747.10",
  "09.6752.20",
  "09.6753.10",
  "09.6753.20",
  "09.6766.10",
  "09.6804.10",
  "09.6845.10",
  "09.6845.11",
  "09.6845.75",
  "09.6859.10",
  "09.6893.10",
  "09.6893.11",
  "09.6924.11",
  "09.6925.10",
  "09.6943.10",
  "09.7010.20",
  "09.7010.2X",
  "09.7010.76",
  "09.7011.10",
  "09.7011.1X",
  "09.7011.75",
  "09.7012.10",
  "09.7012.1X",
  "09.7012.75",
  "09.7131.10",
  "09.7131.11",
  "09.7196.10",
  "09.7196.11",
  "09.7196.1X",
  "09.7217.20",
  "09.7226.10",
  "09.7226.11",
  "09.7263.30",
  "09.7314.10",
  "09.7357.10",
  "09.7359.20",
  "09.7359.21",
  "09.7367.10",
  "09.7376.10",
  "09.7398.10",
  "09.7402.10",
  "09.7409.10",
  "09.7418.10",
  "09.7421.10",
  "09.7421.81",
  "09.7441.80",
  "09.7442.80",
  "09.7444.80",
  "09.7449.10",
  "09.7452.80",
  "09.7453.10",
  "09.7457.80",
  "09.7465.80",
  "09.7485.80",
  "09.7513.80",
  "09.7514.80",
  "09.7516.10",
  "09.7517.80",
  "09.7521.80",
  "09.7606.10",
  "09.7606.11",
  "09.7628.10",
  "09.7629.10",
  "09.7650.10",
  "09.7650.11",
  "09.7651.10",
  "09.7652.10",
  "09.7652.11",
  "09.7653.10",
  "09.7680.10",
  "09.7686.10",
  "09.7701.10",
  "09.7701.11",
  "09.7701.75",
  "09.7702.10",
  "09.7720.10",
  "09.7720.11",
  "09.7727.10",
  "09.7727.11",
  "09.7787.10",
  "09.7806.10",
  "09.7806.1X",
  "09.7806.75",
  "09.7812.2X",
  "09.7813.2X",
  "09.7815.10",
  "09.7823.10",
  "09.7823.11",
  "09.7880.10",
  "09.7880.1X",
  "09.7894.80",
  "09.7895.80",
  "09.7911.20",
  "09.7932.10",
  "09.7932.11",
  "09.7964.10",
  "09.7977.10",
  "09.7978.80",
  "09.7987.10",
  "09.7988.10",
  "09.7989.80",
  "09.8012.80",
  "09.8021.10",
  "09.8025.10",
  "09.8025.11",
  "09.8028.10",
  "09.8032.80",
  "09.8066.10",
  "09.8137.20",
  "09.8137.76",
  "09.8178.80",
  "09.8181.80",
  "09.8182.10",
  "09.8184.80",
  "09.8186.10",
  "09.8187.80",
  "09.8188.80",
  "09.8188.81",
  "09.8189.80",
  "09.8192.80",
  "09.8192.81",
  "09.8193.80",
  "09.8193.81",
  "09.8194.10",
  "09.8194.80",
  "09.8196.80",
  "09.8219.80",
  "09.8304.11",
  "09.8304.20",
  "09.8313.80",
  "09.8324.11",
  "09.8404.10",
  "09.8411.10",
  "09.8411.11",
  "09.8449.80",
  "09.8456.10",
  "09.8459.81",
  "09.8475.10",
  "09.8481.10",
  "09.8490.10",
  "09.8514.80",
  "09.8519.10",
  "09.8519.11",
  "09.8545.10",
  "09.8545.11",
  "09.8555.21",
  "09.8601.10",
  "09.8608.80",
  "09.8608.81",
  "09.8609.11",
  "09.8614.11",
  "09.8616.11",
  "09.8633.10",
  "09.8633.11",
  "09.8655.10",
  "09.8655.75",
  "09.8665.10",
  "09.8681.11",
  "09.8690.11",
  "09.8690.1X",
  "09.8695.10",
  "09.8695.1X",
  "09.8699.11",
  "09.8700.11",
  "09.8709.81",
  "09.8760.10",
  "09.8810.80",
  "09.8811.80",
  "09.8812.80",
  "09.8814.80",
  "09.8815.10",
  "09.8816.80",
  "09.8818.80",
  "09.8818.81",
  "09.8822.80",
  "09.8840.10",
  "09.8852.10",
  "09.8857.80",
  "09.8860.10",
  "09.8864.10",
  "09.8871.10",
  "09.8872.10",
  "09.8876.31",
  "09.8877.31",
  "09.8904.10",
  "09.8917.80",
  "09.8931.21",
  "09.8932.10",
  "09.8937.10",
  "09.8952.10",
  "09.8952.11",
  "09.8952.1X",
  "09.8953.10",
  "09.8953.11",
  "09.8961.21",
  "09.8965.10",
  "09.8965.11",
  "09.8969.20",
  "09.8969.21",
  "09.8972.10",
  "09.8973.10",
  "09.8975.80",
  "09.8976.80",
  "09.8977.10",
  "09.8998.11",
  "09.9022.10",
  "09.9022.11",
  "09.9037.10",
  "09.9042.20",
  "09.9056.80",
  "09.9060.80",
  "09.9077.1X",
  "09.9078.10",
  "09.9078.1X",
  "09.9078.20",
  "09.9103.10",
  "09.9103.11",
  "09.9104.10",
  "09.9111.11",
  "09.9115.80",
  "09.9130.10",
  "09.9130.11",
  "09.9133.80",
  "09.9133.81",
  "09.9142.10",
  "09.9144.10",
  "09.9145.10",
  "09.9145.1X",
  "09.9145.75",
  "09.9159.20",
  "09.9162.10",
  "09.9165.10",
  "09.9167.10",
  "09.9167.1X",
  "09.9167.75",
  "09.9172.11",
  "09.9177.10",
  "09.9185.10",
  "09.9190.80",
  "09.9268.10",
  "09.9355.11",
  "09.9363.21",
  "09.9368.10",
  "09.9368.11",
  "09.9369.10",
  "09.9372.21",
  "09.9373.21",
  "09.9442.10",
  "09.9464.10",
  "09.9464.11",
  "09.9464.20",
  "09.9464.21",
  "09.9464.21",
  "09.9468.10",
  "09.9468.11",
  "09.9468.20",
  "09.9468.2X",
  "09.9483.10",
  "09.9503.10",
  "09.9505.10",
  "09.9505.11",
  "09.9508.10",
  "09.9510.11",
  "09.9510.14",
  "09.9537.10",
  "09.9544.10",
  "09.9554.10",
  "09.9559.20",
  "09.9573.11",
  "09.9573.1X",
  "09.9574.10",
  "09.9581.11",
  "09.9581.1X",
  "09.9582.10",
  "09.9586.11",
  "09.9587.11",
  "09.9590.11",
  "09.9598.11",
  "09.9618.20",
  "09.9727.10",
  "09.9738.10",
  "09.9738.11",
  "09.9750.11",
  "09.9750.21",
  "09.9752.10",
  "09.9752.11",
  "09.9753.10",
  "09.9755.10",
  "09.9755.11",
  "09.9772.10",
  "09.9772.11",
  "09.9772.1X",
  "09.9772.75",
  "09.9793.10",
  "09.9793.11",
  "09.9825.11",
  "09.9825.21",
  "09.9827.10",
  "09.9827.11",
  "09.9848.11",
  "09.9869.80",
  "09.9869.81",
  "09.9870.11",
  "09.9871.11",
  "09.9905.10",
  "09.9911.11",
  "09.9914.11",
  "09.9915.11",
  "09.9921.11",
  "09.9922.10",
  "09.9922.11",
  "09.9923.11",
  "09.9924.10",
  "09.9924.11",
  "09.9925.11",
  "09.9935.11",
  "09.9936.11",
  "09.9996.10",
  "09.A031.10",
  "09.A031.11",
  "09.A047.20",
  "09.A047.31",
  "09.A052.10",
  "09.A110.10",
  "09.A113.11",
  "09.A148.10",
  "09.A148.11",
  "09.A182.11",
  "09.A183.11",
  "09.A185.11",
  "09.A200.10",
  "09.A200.1X",
  "09.A204.10",
  "09.A204.11",
  "09.A229.11",
  "09.A235.20",
  "09.A259.10",
  "09.A259.11",
  "09.A270.10",
  "09.A271.11",
  "09.A334.10",
  "09.A334.20",
  "09.A334.21",
  "09.A353.10",
  "09.A358.11",
  "09.A386.10",
  "09.A386.11",
  "09.A400.10",
  "09.A401.10",
  "09.A401.11",
  "09.A402.10",
  "09.A402.11",
  "09.A404.10",
  "09.A405.10",
  "09.A405.11",
  "09.A406.10",
  "09.A406.11",
  "09.A406.21",
  "09.A407.10",
  "09.A407.11",
  "09.A408.10",
  "09.A409.10",
  "09.A417.11",
  "09.A417.1X",
  "09.A427.11",
  "09.A445.10",
  "09.A448.20",
  "09.A448.21",
  "09.A452.10",
  "09.A455.11",
  "09.A528.11",
  "09.A529.10",
  "09.A531.10",
  "09.A532.10",
  "09.A532.11",
  "09.A532.1X",
  "09.A532.21",
  "09.A535.10",
  "09.A535.11",
  "09.A535.20",
  "09.A538.10",
  "09.A538.11",
  "09.A599.11",
  "09.A613.50",
  "09.A613.51",
  "09.A621.11",
  "09.A621.31",
  "09.A629.11",
  "09.A629.20",
  "09.A630.10",
  "09.A634.10",
  "09.A637.10",
  "09.A652.10",
  "09.A707.10",
  "09.A707.11",
  "09.A712.11",
  "09.A716.20",
  "09.A716.21",
  "09.A727.10",
  "09.A727.1X",
  "09.A728.11",
  "09.A736.11",
  "09.A738.10",
  "09.A758.10",
  "09.A758.11",
  "09.A758.1X",
  "09.A760.11",
  "09.A761.10",
  "09.A761.11",
  "09.A761.1X",
  "09.A771.11",
  "09.A773.11",
  "09.A774.11",
  "09.A815.10",
  "09.A820.10",
  "09.A820.11",
  "09.A820.1X",
  "09.A867.10",
  "09.A868.10",
  "09.A905.10",
  "09.A921.1X",
  "09.A922.10",
  "09.A922.14",
  "09.A956.11",
  "09.A958.11",
  "09.A958.21",
  "09.A959.11",
  "09.A959.21",
  "09.A960.21",
  "09.A961.11",
  "09.A961.21",
  "09.A966.10",
  "09.A966.1X",
  "09.A967.10",
  "09.A967.11",
  "09.A967.1X",
  "09.A968.10",
  "09.A968.11",
  "09.A968.20",
  "09.A969.11",
  "09.A971.10",
  "09.A971.11",
  "09.A972.10",
  "09.B002.50",
  "09.B025.10",
  "09.B026.10",
  "09.B039.10",
  "09.B039.1X",
  "09.B040.1X",
  "09.B042.10",
  "09.B063.10",
  "09.B090.10",
  "09.B093.10",
  "09.B095.10",
  "09.B099.10",
  "09.B100.10",
  "09.B142.10",
  "09.B151.10",
  "09.B262.10",
  "09.B266.10",
  "09.B267.10",
  "09.B268.11",
  "09.B272.10",
  "09.B273.10",
  "09.B280.41",
  "09.B288.10",
  "09.B311.11",
  "09.B312.11",
  "09.B313.11",
  "09.B337.21",
  "09.B337.2X",
  "09.B338.11",
  "09.B344.41",
  "09.B344.4X",
  "09.B354.11",
  "09.B355.10",
  "09.B355.1X",
  "09.B356.10",
  "09.B356.1X",
  "09.B356.20",
  "09.B386.13",
  "09.B411.11",
  "09.B414.11",
  "09.B436.51",
  "09.B448.10",
  "09.B448.11",
  "09.B452.10",
  "09.B459.10",
  "09.B459.11",
  "09.B461.10",
  "09.B461.11",
  "09.B503.11",
  "09.B504.11",
  "09.B518.10",
  "09.B518.11",
  "09.B519.10",
  "09.B519.11",
  "09.B520.10",
  "09.B520.21",
  "09.B521.10",
  "09.B521.11",
  "09.B526.10",
  "09.B530.10",
  "09.B530.11",
  "09.B531.10",
  "09.B532.10",
  "09.B533.10",
  "09.B534.10",
  "09.B534.11",
  "09.B538.11",
  "09.B539.10",
  "09.B541.10",
  "09.B541.11",
  "09.B541.11",
  "09.B542.10",
  "09.B542.11",
  "09.B543.10",
  "09.B543.11",
  "09.B544.10",
  "09.B546.10",
  "09.B546.11",
  "09.B552.10",
  "09.B552.11",
  "09.B553.10",
  "09.B553.11",
  "09.B555.10",
  "09.B555.11",
  "09.B555.11",
  "09.B569.11",
  "09.B570.11",
  "09.B585.10",
  "09.B587.10",
  "09.B588.11",
  "09.B589.11",
  "09.B592.10",
  "09.B593.10",
  "09.B595.10",
  "09.B595.11",
  "09.B595.20",
  "09.B595.21",
  "09.B597.10",
  "09.B599.10",
  "09.B599.20",
  "09.B606.11",
  "09.B608.10",
  "09.B609.10",
  "09.B614.10",
  "09.B616.10",
  "09.B619.10",
  "09.B620.11",
  "09.B623.10",
  "09.B624.11",
  "09.B626.10",
  "09.B632.10",
  "09.B634.10",
  "09.B634.11",
  "09.B638.11",
  "09.B639.10",
  "09.B648.10",
  "09.B648.11",
  "09.B648.20",
  "09.B655.10",
  "09.B656.10",
  "09.B656.11",
  "09.B657.10",
  "09.B657.11",
  "09.B659.10",
  "09.B661.10",
  "09.B745.41",
  "09.B746.51",
  "09.B754.11",
  "09.B754.21",
  "09.B788.11",
  "09.B807.41",
  "09.B807.51",
  "09.B822.11",
  "09.B858.11",
  "09.B913.11",
  "09.B969.11",
  "09.B970.11",
  "09.B971.11",
  "09.B972.11",
  "09.B973.10",
  "09.B973.11",
  "09.B975.10",
  "09.B994.10",
  "09.B994.11",
  "09.C003.10",
  "09.C003.11",
  "09.C004.10",
  "09.C004.11",
  "09.C005.10",
  "09.C005.11",
  "09.C047.11",
  "09.C114.11",
  "09.C116.11",
  "09.C117.11",
  "09.C133.11",
  "09.C171.10",
  "09.C171.11",
  "09.C171.1X",
  "09.C173.11",
  "09.C174.10",
  "09.C176.11",
  "09.C177.11",
  "09.C178.11",
  "09.C182.10",
  "09.C185.10",
  "09.C185.11",
  "09.C207.11",
  "09.C244.10",
  "09.C245.11",
  "09.C246.11",
  "09.C249.11",
  "09.C251.21",
  "09.C274.10",
  "09.C274.11",
  "09.C274.21",
  "09.C282.11",
  "09.C285.11",
  "09.C289.10",
  "09.C306.11",
  "09.C313.11",
  "09.C315.11",
  "09.C348.10",
  "09.C349.10",
  "09.C349.11",
  "09.C350.11",
  "09.C394.13",
  "09.C395.13",
  "09.C396.13",
  "09.C398.13",
  "09.C421.11",
  "09.C424.11",
  "09.C499.10",
  "09.C499.11",
  "09.C542.11",
  "09.C542.21",
  "09.C543.11",
  "09.C545.11",
  "09.C636.11",
  "09.C649.11",
  "09.C651.11",
  "09.C652.11",
  "09.C657.11",
  "09.C743.11",
  "09.C744.11",
  "09.C824.10",
  "09.C877.11",
  "09.C878.11",
  "09.C880.11",
  "09.C881.11",
  "09.C882.11",
  "09.C884.11",
  "09.C892.11",
  "09.C894.10",
  "09.C896.11",
  "09.C927.11",
  "09.C928.11",
  "09.C936.11",
  "09.D018.11",
  "09.D059.11",
  "09.D065.11",
  "09.D155.11",
  "09.D216.11",
  "09.D219.11",
  "09.D272.10",
  "09.D274.11",
  "09.D274.20",
  "09.D276.11",
  "09.D279.11",
  "09.D280.11",
  "09.D395.11",
  "09.D426.11",
  "09.D428.11",
  "09.D449.11",
  "09.D450.11",
  "09.D451.10",
  "09.D452.11",
  "09.D529.13",
  "09.D570.11",
  "09.D619.11",
  "09.D628.11",
  "09.D706.11",
  "09.N124.10",
  "09.N124.11",
  "09.N125.10",
  "09.N125.11",
  "09.N212.10",
  "09.N212.11",
  "09.N234.11",
  "09.N235.11",
  "09.N236.10",
  "09.N236.11",
  "09.N246.21",
  "09.N247.11",
  "09.N264.11",
  "09.R103.11",
  "09.R104.11",
  "09.R105.11",
  "09.R122.11",
  "09.R124.21",
  "14.3219.10",
  "14.3220.10",
  "14.3251.10",
  "14.3256.10",
  "14.3283.10",
  "14.4733.10",
  "14.4978.10",
  "14.5068.10",
  "14.5073.10",
  "14.5102.10",
  "14.5591.10",
  "14.5722.10",
  "14.5815.10",
  "14.5816.10",
  "14.5822.10",
  "14.5826.10",
  "14.6757.10",
  "14.6759.10",
  "14.6764.10",
  "14.6775.10",
  "14.7093.10",
  "14.7248.10",
  "14.7257.10",
  "14.7317.10",
  "14.7715.10",
  "14.7735.10",
  "14.7736.10",
  "14.7743.10",
  "14.7746.10",
  "14.7747.10",
  "14.7754.10",
  "14.7900.10",
  "14.7901.10",
  "14.7903.10",
  "14.7904.10",
  "14.8109.80",
  "14.8110.85",
  "14.8467.80",
  "14.8799.80",
  "14.8801.80",
  "14.8855.80",
  "14.9384.10",
  "14.9384.20",
  "14.9386.10",
  "14.9392.10",
  "14.9395.10",
  "14.A676.10",
  "14.A683.10",
  "14.A695.10",
  "14.A702.10",
  "14.A710.10",
  "14.B240.10",
  "14.B249.10",
  "14.B465.10",
  "14.B571.10",
  "14.B572.10",
  "14.B574.10",
  "14.B575.10",
  "14.B577.10",
  "14.B578.10",
  "14.B579.10",
  "14.B583.10",
  "14.B640.10",
  "14.B641.10",
  "14.B642.10",
  "14.B986.10",
  "14.C001.10",
  "14.C183.10",
  "14.C184.10",
  "14.C212.10",
  "14.C275.10",
  "14.C277.10",
  "14.C278.10",
  "14.C279.10",
  "14.C281.10",
  "14.C337.10",
  "14.D631.20",
  "14.D638.10",
  "14.N204.10",
  "14.XXXX.10",
];
//Numeros cortos Discos sin terminacion .10, .11 etc
const bremCort10 = [
  //.10
  "08.2275",
  "08.2536",
  "08.2691",
  "08.4177",
  "08.4250",
  "08.4932",
  "08.5005",
  "08.5149",
  "08.5266",
  "08.5334",
  "08.5359",
  "08.5443",
  "08.5719",
  "08.5743",
  "08.6768",
  "08.6838",
  "08.6899",
  "08.6903",
  "08.6911",
  "08.6931",
  "08.6935",
  "08.7042",
  "08.7104",
  "08.7165",
  "08.7288",
  "08.7351",
  "08.7607",
  "08.7626",
  "08.7627",
  "08.7724",
  "08.7725",
  "08.7765",
  "08.7811",
  "08.7822",
  "08.7984",
  "08.7997",
  "08.8065",
  "08.8163",
  "08.8305",
  "08.8405",
  "08.8463",
  "08.8974",
  "08.9083",
  "08.9107",
  "08.9163",
  "08.9179",
  "08.9488",
  "08.9502",
  "08.9509",
  "08.9511",
  "08.9975",
  "08.A029",
  "08.A108",
  "08.A122",
  "08.A147",
  "08.A202",
  "08.A205",
  "08.A268",
  "08.A274",
  "08.A333",
  "08.A351",
  "08.A403",
  "08.A429",
  "08.A533",
  "08.A602",
  "08.A636",
  "08.A708",
  "08.A715",
  "08.A725",
  "08.A730",
  "08.A755",
  "08.A759",
  "08.A869",
  "08.B029",
  "08.B357",
  "08.B412",
  "08.B413",
  "08.B437",
  "08.B443",
  "08.B546",
  "08.B449",
  "08.B464",
  "08.B566",
  "08.B568",
  "08.B584",
  "08.B590",
  "08.B600",
  "08.B601",
  "08.B602",
  "08.B603",
  "08.B662",
  "08.B992",
  "08.C083",
  "08.C172",
  "08.C247",
  "08.C276",
  "08.D281",
  "08.D326",
  "08.N123",
  "08.N226",
  "09.3090",
  "09.4765",
  "09.4939",
  "09.5055",
  "09.5059",
  "09.5101",
  "09.5166",
  "09.5173",
  "09.5196",
  "09.5253",
  "09.5254",
  "09.5255",
  "09.5285",
  "09.5290",
  "09.5449",
  "09.5584",
  "09.5640",
  "09.5707",
  "09.5708",
  "09.5736",
  "09.5801",
  "09.5843",
  "09.5870",
  "09.6727",
  "09.6744",
  "09.6747",
  "09.6753",
  "09.6766",
  "09.6804",
  "09.6845",
  "09.6859",
  "09.6893",
  "09.6925",
  "09.6943",
  "09.7011",
  "09.7012",
  "09.7131",
  "09.7196",
  "09.7226",
  "09.7314",
  "09.7357",
  "09.7367",
  "09.7376",
  "09.7398",
  "09.7402",
  "09.7409",
  "09.7418",
  "09.7421",
  "09.7449",
  "09.7453",
  "09.7516",
  "09.7606",
  "09.7628",
  "09.7629",
  "09.7650",
  "09.7651",
  "09.7652",
  "09.7653",
  "09.7680",
  "09.7686",
  "09.7701",
  "09.7702",
  "09.7720",
  "09.7727",
  "09.7787",
  "09.7806",
  "09.7815",
  "09.7823",
  "09.7880",
  "09.7932",
  "09.7964",
  "09.7977",
  "09.7987",
  "09.7988",
  "09.8021",
  "09.8025",
  "09.8028",
  "09.8066",
  "09.8182",
  "09.8186",
  "09.8194",
  "09.8404",
  "09.8411",
  "09.8456",
  "09.8475",
  "09.8481",
  "09.8490",
  "09.8519",
  "09.8545",
  "09.8601",
  "09.8633",
  "09.8655",
  "09.8665",
  "09.8695",
  "09.8760",
  "09.8815",
  "09.8840",
  "09.8852",
  "09.8860",
  "09.8864",
  "09.8871",
  "09.8872",
  "09.8904",
  "09.8932",
  "09.8937",
  "09.8952",
  "09.8953",
  "09.8965",
  "09.8972",
  "09.8973",
  "09.8977",
  "09.9022",
  "09.9037",
  "09.9078",
  "09.9103",
  "09.9104",
  "09.9130",
  "09.9142",
  "09.9144",
  "09.9145",
  "09.9162",
  "09.9165",
  "09.9167",
  "09.9177",
  "09.9185",
  "09.9268",
  "09.9368",
  "09.9369",
  "09.9442",
  "09.9464",
  "09.9468",
  "09.9483",
  "09.9503",
  "09.9505",
  "09.9508",
  "09.9537",
  "09.9544",
  "09.9554",
  "09.9574",
  "09.9582",
  "09.9727",
  "09.9738",
  "09.9752",
  "09.9753",
  "09.9755",
  "09.9772",
  "09.9793",
  "09.9827",
  "09.9905",
  "09.9922",
  "09.9924",
  "09.9996",
  "09.A031",
  "09.A052",
  "09.A110",
  "09.A148",
  "09.A200",
  "09.A204",
  "09.A259",
  "09.A270",
  "09.A334",
  "09.A353",
  "09.A386",
  "09.A400",
  "09.A401",
  "09.A402",
  "09.A404",
  "09.A405",
  "09.A406",
  "09.A407",
  "09.A408",
  "09.A409",
  "09.A445",
  "09.A452",
  "09.A529",
  "09.A531",
  "09.A532",
  "09.A535",
  "09.A538",
  "09.A630",
  "09.A634",
  "09.A637",
  "09.A652",
  "09.A707",
  "09.A727",
  "09.A738",
  "09.A758",
  "09.A761",
  "09.A815",
  "09.A820",
  "09.A867",
  "09.A868",
  "09.A905",
  "09.A922",
  "09.A966",
  "09.A967",
  "09.A968",
  "09.A971",
  "09.A972",
  "09.B025",
  "09.B026",
  "09.B039",
  "09.B042",
  "09.B063",
  "09.B090",
  "09.B093",
  "09.B095",
  "09.B099",
  "09.B100",
  "09.B142",
  "09.B151",
  "09.B262",
  "09.B266",
  "09.B267",
  "09.B272",
  "09.B273",
  "09.B288",
  "09.B355",
  "09.B356",
  "09.B448",
  "09.B452",
  "09.B459",
  "09.B461",
  "09.B518",
  "09.B519",
  "09.B520",
  "09.B521",
  "09.B526",
  "09.B530",
  "09.B531",
  "09.B532",
  "09.B533",
  "09.B534",
  "09.B539",
  "09.B541",
  "09.B542",
  "09.B543",
  "09.B544",
  "09.B546",
  "09.B552",
  "09.B553",
  "09.B555",
  "09.B585",
  "09.B587",
  "09.B592",
  "09.B593",
  "09.B595",
  "09.B597",
  "09.B599",
  "09.B608",
  "09.B609",
  "09.B614",
  "09.B616",
  "09.B619",
  "09.B623",
  "09.B626",
  "09.B632",
  "09.B634",
  "09.B639",
  "09.B648",
  "09.B655",
  "09.B656",
  "09.B657",
  "09.B659",
  "09.B661",
  "09.B973",
  "09.B975",
  "09.B994",
  "09.C003",
  "09.C004",
  "09.C005",
  "09.C171",
  "09.C174",
  "09.C182",
  "09.C185",
  "09.C244",
  "09.C274",
  "09.C289",
  "09.C348",
  "09.C349",
  "09.C499",
  "09.C824",
  "09.C894",
  "09.D272",
  "09.D451",
  "09.N124",
  "09.N125",
  "09.N212",
  "09.N236",
  "14.3219",
  "14.3220",
  "14.3251",
  "14.3256",
  "14.3283",
  "14.4733",
  "14.4978",
  "14.5068",
  "14.5073",
  "14.5102",
  "14.5591",
  "14.5722",
  "14.5815",
  "14.5816",
  "14.5822",
  "14.5826",
  "14.6757",
  "14.6759",
  "14.6764",
  "14.6775",
  "14.7093",
  "14.7248",
  "14.7257",
  "14.7317",
  "14.7715",
  "14.7735",
  "14.7736",
  "14.7743",
  "14.7746",
  "14.7747",
  "14.7754",
  "14.7900",
  "14.7901",
  "14.7903",
  "14.7904",
  "14.9384",
  "14.9386",
  "14.9392",
  "14.9395",
  "14.A676",
  "14.A683",
  "14.A695",
  "14.A702",
  "14.A710",
  "14.B240",
  "14.B249",
  "14.B465",
  "14.B571",
  "14.B572",
  "14.B574",
  "14.B575",
  "14.B577",
  "14.B578",
  "14.B579",
  "14.B583",
  "14.B640",
  "14.B641",
  "14.B642",
  "14.B986",
  "14.C001",
  "14.C183",
  "14.C184",
  "14.C212",
  "14.C275",
  "14.C277",
  "14.C278",
  "14.C279",
  "14.C281",
  "14.C337",
  "14.D638",
  "14.N204",
  "14.XXXX",
];
const bremCort75 = [
  //.75
  "08.4177",
  "08.7165",
  "08.9163",
  "09.3090",
  "09.5166",
  "09.6845",
  "09.7011",
  "09.7012",
  "09.7701",
  "09.7806",
  "09.8655",
  "09.9145",
  "09.9167",
  "09.9772",
];
const bremCort21 = [
  //.21
  "08.4738",
  "08.4931",
  "08.5366",
  "08.7165",
  "08.7211",
  "08.8843",
  "08.9918",
  "08.9975",
  "08.B529",
  "08.B566",
  "08.C172",
  "08.N258",
  "09.4939",
  "09.4987",
  "09.5254",
  "09.5579",
  "09.7359",
  "09.8555",
  "09.8931",
  "09.8961",
  "09.8969",
  "09.9363",
  "09.9372",
  "09.9373",
  "09.9464",
  "09.9464",
  "09.9750",
  "09.9825",
  "09.A334",
  "09.A406",
  "09.A448",
  "09.A532",
  "09.A716",
  "09.A958",
  "09.A959",
  "09.A960",
  "09.A961",
  "09.B337",
  "09.B520",
  "09.B595",
  "09.B754",
  "09.C251",
  "09.C274",
  "09.C542",
  "09.N246",
  "09.R124",
];
const bremCort11 = [
  //.11
  "08.5085",
  "08.5086",
  "08.5334",
  "08.5359",
  "08.5743",
  "08.6838",
  "08.6897",
  "08.6931",
  "08.6935",
  "08.7042",
  "08.7288",
  "08.7607",
  "08.7626",
  "08.7627",
  "08.7765",
  "08.7936",
  "08.8405",
  "08.8408",
  "08.8463",
  "08.9083",
  "08.9084",
  "08.9107",
  "08.9488",
  "08.9580",
  "08.9584",
  "08.9729",
  "08.9734",
  "08.9787",
  "08.9975",
  "08.A029",
  "08.A029",
  "08.A108",
  "08.A112",
  "08.A147",
  "08.A202",
  "08.A205",
  "08.A332",
  "08.A351",
  "08.A355",
  "08.A403",
  "08.A429",
  "08.A446",
  "08.A533",
  "08.A540",
  "08.A636",
  "08.A725",
  "08.A737",
  "08.A759",
  "08.A863",
  "08.A869",
  "08.A871",
  "08.A872",
  "08.A957",
  "08.A970",
  "08.B271",
  "08.B412",
  "08.B413",
  "08.B437",
  "08.B449",
  "08.B464",
  "08.B529",
  "08.B566",
  "08.B568",
  "08.B568",
  "08.B590",
  "08.B600",
  "08.B605",
  "08.B649",
  "08.C046",
  "08.C115",
  "08.C208",
  "08.C252",
  "08.C307",
  "08.C308",
  "08.C352",
  "08.C423",
  "08.C425",
  "08.C501",
  "08.C653",
  "08.C659",
  "08.C661",
  "08.D222",
  "08.D278",
  "08.D326",
  "08.R101",
  "09.4939",
  "09.5196",
  "09.5509",
  "09.5640",
  "09.6665",
  "09.6845",
  "09.6893",
  "09.6924",
  "09.7131",
  "09.7196",
  "09.7226",
  "09.7606",
  "09.7650",
  "09.7652",
  "09.7701",
  "09.7720",
  "09.7727",
  "09.7823",
  "09.7932",
  "09.8025",
  "09.8304",
  "09.8324",
  "09.8411",
  "09.8519",
  "09.8545",
  "09.8609",
  "09.8614",
  "09.8616",
  "09.8633",
  "09.8681",
  "09.8690",
  "09.8699",
  "09.8700",
  "09.8952",
  "09.8953",
  "09.8965",
  "09.8998",
  "09.9022",
  "09.9103",
  "09.9111",
  "09.9130",
  "09.9172",
  "09.9355",
  "09.9368",
  "09.9464",
  "09.9468",
  "09.9505",
  "09.9510",
  "09.9573",
  "09.9581",
  "09.9586",
  "09.9587",
  "09.9590",
  "09.9598",
  "09.9738",
  "09.9750",
  "09.9752",
  "09.9755",
  "09.9772",
  "09.9793",
  "09.9825",
  "09.9827",
  "09.9848",
  "09.9870",
  "09.9871",
  "09.9911",
  "09.9914",
  "09.9915",
  "09.9921",
  "09.9922",
  "09.9923",
  "09.9924",
  "09.9925",
  "09.9935",
  "09.9936",
  "09.A031",
  "09.A113",
  "09.A148",
  "09.A182",
  "09.A183",
  "09.A185",
  "09.A204",
  "09.A229",
  "09.A259",
  "09.A271",
  "09.A358",
  "09.A386",
  "09.A401",
  "09.A402",
  "09.A405",
  "09.A406",
  "09.A407",
  "09.A417",
  "09.A427",
  "09.A455",
  "09.A528",
  "09.A532",
  "09.A535",
  "09.A538",
  "09.A599",
  "09.A621",
  "09.A629",
  "09.A707",
  "09.A712",
  "09.A728",
  "09.A736",
  "09.A758",
  "09.A760",
  "09.A761",
  "09.A771",
  "09.A773",
  "09.A774",
  "09.A820",
  "09.A956",
  "09.A958",
  "09.A959",
  "09.A961",
  "09.A967",
  "09.A968",
  "09.A969",
  "09.A971",
  "09.B268",
  "09.B311",
  "09.B312",
  "09.B313",
  "09.B338",
  "09.B354",
  "09.B411",
  "09.B414",
  "09.B448",
  "09.B459",
  "09.B461",
  "09.B503",
  "09.B504",
  "09.B518",
  "09.B519",
  "09.B521",
  "09.B530",
  "09.B534",
  "09.B538",
  "09.B541",
  "09.B541",
  "09.B542",
  "09.B543",
  "09.B546",
  "09.B552",
  "09.B553",
  "09.B555",
  "09.B555",
  "09.B569",
  "09.B570",
  "09.B588",
  "09.B589",
  "09.B595",
  "09.B606",
  "09.B620",
  "09.B624",
  "09.B634",
  "09.B638",
  "09.B648",
  "09.B656",
  "09.B657",
  "09.B754",
  "09.B788",
  "09.B822",
  "09.B858",
  "09.B913",
  "09.B969",
  "09.B970",
  "09.B971",
  "09.B972",
  "09.B973",
  "09.B994",
  "09.C003",
  "09.C004",
  "09.C005",
  "09.C047",
  "09.C114",
  "09.C116",
  "09.C117",
  "09.C133",
  "09.C171",
  "09.C173",
  "09.C176",
  "09.C177",
  "09.C178",
  "09.C185",
  "09.C207",
  "09.C245",
  "09.C246",
  "09.C249",
  "09.C274",
  "09.C282",
  "09.C285",
  "09.C306",
  "09.C313",
  "09.C315",
  "09.C349",
  "09.C350",
  "09.C421",
  "09.C424",
  "09.C499",
  "09.C542",
  "09.C543",
  "09.C545",
  "09.C636",
  "09.C649",
  "09.C651",
  "09.C652",
  "09.C657",
  "09.C743",
  "09.C744",
  "09.C877",
  "09.C878",
  "09.C880",
  "09.C881",
  "09.C882",
  "09.C884",
  "09.C892",
  "09.C896",
  "09.C927",
  "09.C928",
  "09.C936",
  "09.D018",
  "09.D059",
  "09.D065",
  "09.D155",
  "09.D216",
  "09.D219",
  "09.D274",
  "09.D276",
  "09.D279",
  "09.D280",
  "09.D395",
  "09.D426",
  "09.D428",
  "09.D449",
  "09.D450",
  "09.D452",
  "09.D570",
  "09.D619",
  "09.D628",
  "09.D706",
  "09.N124",
  "09.N125",
  "09.N212",
  "09.N234",
  "09.N235",
  "09.N236",
  "09.N247",
  "09.N264",
  "09.R103",
  "09.R104",
  "09.R105",
  "09.R122",
];
const bremCort20 = [
  //.20
  "08.4931",
  "08.5366",
  "08.5803",
  "08.7211",
  "08.7725",
  "08.8163",
  "08.8316",
  "08.8868",
  "08.9918",
  "08.9975",
  "08.A029",
  "08.A114",
  "08.B529",
  "09.3090",
  "09.4939",
  "09.4987",
  "09.5084",
  "09.5254",
  "09.5527",
  "09.5802",
  "09.6752",
  "09.6753",
  "09.7010",
  "09.7217",
  "09.7359",
  "09.7911",
  "09.8137",
  "09.8304",
  "09.8969",
  "09.9042",
  "09.9078",
  "09.9159",
  "09.9464",
  "09.9468",
  "09.9559",
  "09.9618",
  "09.A047",
  "09.A235",
  "09.A334",
  "09.A448",
  "09.A535",
  "09.A629",
  "09.A716",
  "09.A968",
  "09.B356",
  "09.B595",
  "09.B599",
  "09.B648",
  "09.D274",
  "14.9384",
  "14.D631",
];
const bremCort80 = [
  //.80
  "08.5803",
  "08.6853",
  "08.7019",
  "08.7518",
  "08.8214",
  "08.8264",
  "08.8445",
  "08.8994",
  "09.7441",
  "09.7442",
  "09.7444",
  "09.7452",
  "09.7457",
  "09.7465",
  "09.7485",
  "09.7513",
  "09.7514",
  "09.7517",
  "09.7521",
  "09.7894",
  "09.7895",
  "09.7978",
  "09.7989",
  "09.8012",
  "09.8032",
  "09.8178",
  "09.8181",
  "09.8184",
  "09.8187",
  "09.8188",
  "09.8189",
  "09.8192",
  "09.8193",
  "09.8194",
  "09.8196",
  "09.8219",
  "09.8313",
  "09.8449",
  "09.8514",
  "09.8608",
  "09.8810",
  "09.8811",
  "09.8812",
  "09.8814",
  "09.8816",
  "09.8818",
  "09.8822",
  "09.8857",
  "09.8917",
  "09.8975",
  "09.8976",
  "09.9056",
  "09.9060",
  "09.9115",
  "09.9133",
  "09.9190",
  "09.9869",
  "14.8109",
  "14.8467",
  "14.8799",
  "14.8801",
  "14.8855",
];
const bremCort2X = [
  //.2X
  "08.4931",
  "08.9975",
  "09.5745",
  "09.5802",
  "09.7010",
  "09.7812",
  "09.7813",
  "09.9468",
  "09.B337",
];
const bremCort30 = [
  //.30
  "08.5178",
  "08.A114",
  "08.A534",
  "09.4939",
  "09.5390",
  "09.5457",
  "09.5581",
  "09.5640",
  "09.5843",
  "09.6727",
  "09.7263",
];
const bremCort1X = [
  //.1X
  "08.5334",
  "08.7165",
  "08.9163",
  "08.9502",
  "08.A147",
  "08.A202",
  "08.A759",
  "08.B413",
  "08.C172",
  "09.3090",
  "09.7011",
  "09.7012",
  "09.7196",
  "09.7806",
  "09.7880",
  "09.8690",
  "09.8695",
  "09.8952",
  "09.9077",
  "09.9078",
  "09.9145",
  "09.9167",
  "09.9573",
  "09.9581",
  "09.9772",
  "09.A200",
  "09.A417",
  "09.A532",
  "09.A727",
  "09.A758",
  "09.A761",
  "09.A820",
  "09.A921",
  "09.A966",
  "09.A967",
  "09.B039",
  "09.B040",
  "09.B355",
  "09.B356",
  "09.C171",
];
const bremCort76 = [
  //.76
  "08.5366",
  "09.5802",
  "09.7010",
  "09.8137",
];
const bremCort31 = [
  //.31
  "08.5178",
  "08.A114",
  "08.A534",
  "09.4939",
  "09.5457",
  "09.5843",
  "09.8876",
  "09.8877",
  "09.A047",
  "09.A621",
];
const bremCort60 = [
  //.60
  "08.5443",
  "08.8094",
];
const bremCort25 = [
  //.25
  "08.5834",
];
const bremCort81 = [
  //.81
  "08.6853",
  "08.7019",
  "08.8214",
  "09.7421",
  "09.8188",
  "09.8192",
  "09.8193",
  "09.8459",
  "09.8608",
  "09.8709",
  "09.8818",
  "09.9133",
  "09.9869",
];
const bremCort50 = [
  //.50
  "08.8094",
  "09.A613",
  "09.B002",
];
const bremCort41 = [
  //.41
  "08.9460",
  "08.A612",
  "08.B347",
  "08.B348",
  "09.4869",
  "09.B280",
  "09.B344",
  "09.B745",
  "09.B807",
];
const bremCort27 = [
  //.27
  "08.9512",
];
const bremCort17 = [
  //.17
  "08.9597",
  "08.A135",
  "08.A729",
];
const bremCort13 = [
  //.13
  "08.D530",
  "09.B386",
  "09.C394",
  "09.C395",
  "09.C396",
  "09.C398",
  "09.D529",
];
const bremCort40 = [
  //.40
  "08.A612",
];
const bremCort77 = [
  //.77
  "09.5390",
  "09.6727",
];
const bremCort3X = [
  //.3X
  "09.5457",
];
const bremCort14 = [
  //.14
  "09.9510",
  "09.A922",
];
const bremCort51 = [
  //.51
  "09.A613",
  "09.B436",
  "09.B746",
  "09.B807",
];
const bremCort4X = [
  //.4X
  "09.B344",
];
const bremCort85 = [
  //.85
  "14.8110",
];

//Numeros cortos Discos sin terminacion .10, .11 etc
const bremCort08 = [
  "2275.10",
  "2536.10",
  "2691.10",
  "4177.10",
  "4177.75",
  "4250.10",
  "4738.21",
  "4931.20",
  "4931.21",
  "4931.2X",
  "4932.10",
  "5005.10",
  "5085.11",
  "5086.11",
  "5149.10",
  "5178.30",
  "5178.31",
  "5266.10",
  "5334.10",
  "5334.11",
  "5334.1X",
  "5359.10",
  "5359.11",
  "5366.20",
  "5366.21",
  "5366.76",
  "5443.10",
  "5443.60",
  "5719.10",
  "5743.10",
  "5743.11",
  "5803.20",
  "5803.80",
  "5834.25",
  "6768.10",
  "6838.10",
  "6838.11",
  "6853.80",
  "6853.81",
  "6897.11",
  "6899.10",
  "6903.10",
  "6911.10",
  "6931.10",
  "6931.11",
  "6935.10",
  "6935.11",
  "7019.80",
  "7019.81",
  "7042.10",
  "7042.11",
  "7104.10",
  "7165.10",
  "7165.1X",
  "7165.21",
  "7165.75",
  "7211.20",
  "7211.21",
  "7288.10",
  "7288.11",
  "7351.10",
  "7518.80",
  "7607.10",
  "7607.11",
  "7626.10",
  "7626.11",
  "7627.10",
  "7627.11",
  "7724.10",
  "7725.10",
  "7725.20",
  "7765.10",
  "7765.11",
  "7811.10",
  "7822.10",
  "7936.11",
  "7984.10",
  "7997.10",
  "8065.10",
  "8094.50",
  "8094.60",
  "8163.10",
  "8163.20",
  "8214.80",
  "8214.81",
  "8264.80",
  "8305.10",
  "8316.20",
  "8405.10",
  "8405.11",
  "8408.11",
  "8445.80",
  "8463.10",
  "8463.11",
  "8843.21",
  "8868.20",
  "8974.10",
  "8994.80",
  "9083.10",
  "9083.11",
  "9084.11",
  "9107.10",
  "9107.11",
  "9163.10",
  "9163.1X",
  "9163.75",
  "9179.10",
  "9460.41",
  "9488.10",
  "9488.11",
  "9502.10",
  "9502.1X",
  "9509.10",
  "9511.10",
  "9512.27",
  "9580.11",
  "9584.11",
  "9597.17",
  "9729.11",
  "9734.11",
  "9787.11",
  "9918.20",
  "9918.21",
  "9975.10",
  "9975.11",
  "9975.20",
  "9975.21",
  "9975.2X",
  "A029.10",
  "A029.11",
  "A029.11",
  "A029.20",
  "A108.10",
  "A108.11",
  "A112.11",
  "A114.20",
  "A114.30",
  "A114.31",
  "A122.10",
  "A135.17",
  "A147.10",
  "A147.11",
  "A147.1X",
  "A202.10",
  "A202.11",
  "A202.1X",
  "A205.10",
  "A205.11",
  "A268.10",
  "A274.10",
  "A332.11",
  "A333.10",
  "A351.10",
  "A351.11",
  "A355.11",
  "A403.10",
  "A403.11",
  "A429.10",
  "A429.11",
  "A446.11",
  "A533.10",
  "A533.11",
  "A534.30",
  "A534.31",
  "A540.11",
  "A602.10",
  "A612.40",
  "A612.41",
  "A636.10",
  "A636.11",
  "A708.10",
  "A715.10",
  "A725.10",
  "A725.11",
  "A729.17",
  "A730.10",
  "A737.11",
  "A755.10",
  "A759.10",
  "A759.11",
  "A759.1X",
  "A863.11",
  "A869.10",
  "A869.11",
  "A871.11",
  "A872.11",
  "A957.11",
  "A970.11",
  "B029.10",
  "B271.11",
  "B347.41",
  "B348.41",
  "B357.10",
  "B412.10",
  "B412.11",
  "B413.10",
  "B413.11",
  "B413.1X",
  "B437.10",
  "B437.11",
  "B443.10",
  "B449.10",
  "B449.11",
  "B464.10",
  "B464.11",
  "B529.11",
  "B529.20",
  "B529.21",
  "B566.10",
  "B566.11",
  "B566.21",
  "B568.10",
  "B568.11",
  "B568.11",
  "B584.10",
  "B590.10",
  "B590.11",
  "B600.10",
  "B600.11",
  "B601.10",
  "B602.10",
  "B603.10",
  "B605.11",
  "B649.11",
  "B662.10",
  "B992.10",
  "C046.11",
  "C083.10",
  "C115.11",
  "C172.10",
  "C172.1X",
  "C172.21",
  "C208.11",
  "C247.10",
  "C252.11",
  "C276.10",
  "C307.11",
  "C308.11",
  "C352.11",
  "C423.11",
  "C425.11",
  "C501.11",
  "C653.11",
  "C659.11",
  "C661.11",
  "D222.11",
  "D278.11",
  "D281.10",
  "D326.10",
  "D326.11",
  "D530.13",
  "N123.10",
  "N226.10",
  "N258.21",
  "R101.11",
];
const bremCort09 = [
  "3090.10",
  "3090.1X",
  "3090.20",
  "3090.75",
  "4765.10",
  "4869.41",
  "4939.10",
  "4939.11",
  "4939.20",
  "4939.21",
  "4939.30",
  "4939.31",
  "4987.20",
  "4987.21",
  "5055.10",
  "5059.10",
  "5084.20",
  "5101.10",
  "5166.10",
  "5166.75",
  "5173.10",
  "5196.10",
  "5196.11",
  "5253.10",
  "5254.10",
  "5254.20",
  "5254.21",
  "5255.10",
  "5285.10",
  "5290.10",
  "5390.30",
  "5390.77",
  "5449.10",
  "5457.30",
  "5457.31",
  "5457.3X",
  "5509.11",
  "5527.20",
  "5579.21",
  "5581.30",
  "5584.10",
  "5640.10",
  "5640.11",
  "5640.30",
  "5707.10",
  "5708.10",
  "5736.10",
  "5745.2X",
  "5801.10",
  "5802.20",
  "5802.2X",
  "5802.76",
  "5843.10",
  "5843.30",
  "5843.31",
  "5870.10",
  "6665.11",
  "6727.10",
  "6727.30",
  "6727.77",
  "6744.10",
  "6747.10",
  "6752.20",
  "6753.10",
  "6753.20",
  "6766.10",
  "6804.10",
  "6845.10",
  "6845.11",
  "6845.75",
  "6859.10",
  "6893.10",
  "6893.11",
  "6924.11",
  "6925.10",
  "6943.10",
  "7010.20",
  "7010.2X",
  "7010.76",
  "7011.10",
  "7011.1X",
  "7011.75",
  "7012.10",
  "7012.1X",
  "7012.75",
  "7131.10",
  "7131.11",
  "7196.10",
  "7196.11",
  "7196.1X",
  "7217.20",
  "7226.10",
  "7226.11",
  "7263.30",
  "7314.10",
  "7357.10",
  "7359.20",
  "7359.21",
  "7367.10",
  "7376.10",
  "7398.10",
  "7402.10",
  "7409.10",
  "7418.10",
  "7421.10",
  "7421.81",
  "7441.80",
  "7442.80",
  "7444.80",
  "7449.10",
  "7452.80",
  "7453.10",
  "7457.80",
  "7465.80",
  "7485.80",
  "7513.80",
  "7514.80",
  "7516.10",
  "7517.80",
  "7521.80",
  "7606.10",
  "7606.11",
  "7628.10",
  "7629.10",
  "7650.10",
  "7650.11",
  "7651.10",
  "7652.10",
  "7652.11",
  "7653.10",
  "7680.10",
  "7686.10",
  "7701.10",
  "7701.11",
  "7701.75",
  "7702.10",
  "7720.10",
  "7720.11",
  "7727.10",
  "7727.11",
  "7787.10",
  "7806.10",
  "7806.1X",
  "7806.75",
  "7812.2X",
  "7813.2X",
  "7815.10",
  "7823.10",
  "7823.11",
  "7880.10",
  "7880.1X",
  "7894.80",
  "7895.80",
  "7911.20",
  "7932.10",
  "7932.11",
  "7964.10",
  "7977.10",
  "7978.80",
  "7987.10",
  "7988.10",
  "7989.80",
  "8012.80",
  "8021.10",
  "8025.10",
  "8025.11",
  "8028.10",
  "8032.80",
  "8066.10",
  "8137.20",
  "8137.76",
  "8178.80",
  "8181.80",
  "8182.10",
  "8184.80",
  "8186.10",
  "8187.80",
  "8188.80",
  "8188.81",
  "8189.80",
  "8192.80",
  "8192.81",
  "8193.80",
  "8193.81",
  "8194.10",
  "8194.80",
  "8196.80",
  "8219.80",
  "8304.11",
  "8304.20",
  "8313.80",
  "8324.11",
  "8404.10",
  "8411.10",
  "8411.11",
  "8449.80",
  "8456.10",
  "8459.81",
  "8475.10",
  "8481.10",
  "8490.10",
  "8514.80",
  "8519.10",
  "8519.11",
  "8545.10",
  "8545.11",
  "8555.21",
  "8601.10",
  "8608.80",
  "8608.81",
  "8609.11",
  "8614.11",
  "8616.11",
  "8633.10",
  "8633.11",
  "8655.10",
  "8655.75",
  "8665.10",
  "8681.11",
  "8690.11",
  "8690.1X",
  "8695.10",
  "8695.1X",
  "8699.11",
  "8700.11",
  "8709.81",
  "8760.10",
  "8810.80",
  "8811.80",
  "8812.80",
  "8814.80",
  "8815.10",
  "8816.80",
  "8818.80",
  "8818.81",
  "8822.80",
  "8840.10",
  "8852.10",
  "8857.80",
  "8860.10",
  "8864.10",
  "8871.10",
  "8872.10",
  "8876.31",
  "8877.31",
  "8904.10",
  "8917.80",
  "8931.21",
  "8932.10",
  "8937.10",
  "8952.10",
  "8952.11",
  "8952.1X",
  "8953.10",
  "8953.11",
  "8961.21",
  "8965.10",
  "8965.11",
  "8969.20",
  "8969.21",
  "8972.10",
  "8973.10",
  "8975.80",
  "8976.80",
  "8977.10",
  "8998.11",
  "9022.10",
  "9022.11",
  "9037.10",
  "9042.20",
  "9056.80",
  "9060.80",
  "9077.1X",
  "9078.10",
  "9078.1X",
  "9078.20",
  "9103.10",
  "9103.11",
  "9104.10",
  "9111.11",
  "9115.80",
  "9130.10",
  "9130.11",
  "9133.80",
  "9133.81",
  "9142.10",
  "9144.10",
  "9145.10",
  "9145.1X",
  "9145.75",
  "9159.20",
  "9162.10",
  "9165.10",
  "9167.10",
  "9167.1X",
  "9167.75",
  "9172.11",
  "9177.10",
  "9185.10",
  "9190.80",
  "9268.10",
  "9355.11",
  "9363.21",
  "9368.10",
  "9368.11",
  "9369.10",
  "9372.21",
  "9373.21",
  "9442.10",
  "9464.10",
  "9464.11",
  "9464.20",
  "9464.21",
  "9464.21",
  "9468.10",
  "9468.11",
  "9468.20",
  "9468.2X",
  "9483.10",
  "9503.10",
  "9505.10",
  "9505.11",
  "9508.10",
  "9510.11",
  "9510.14",
  "9537.10",
  "9544.10",
  "9554.10",
  "9559.20",
  "9573.11",
  "9573.1X",
  "9574.10",
  "9581.11",
  "9581.1X",
  "9582.10",
  "9586.11",
  "9587.11",
  "9590.11",
  "9598.11",
  "9618.20",
  "9727.10",
  "9738.10",
  "9738.11",
  "9750.11",
  "9750.21",
  "9752.10",
  "9752.11",
  "9753.10",
  "9755.10",
  "9755.11",
  "9772.10",
  "9772.11",
  "9772.1X",
  "9772.75",
  "9793.10",
  "9793.11",
  "9825.11",
  "9825.21",
  "9827.10",
  "9827.11",
  "9848.11",
  "9869.80",
  "9869.81",
  "9870.11",
  "9871.11",
  "9905.10",
  "9911.11",
  "9914.11",
  "9915.11",
  "9921.11",
  "9922.10",
  "9922.11",
  "9923.11",
  "9924.10",
  "9924.11",
  "9925.11",
  "9935.11",
  "9936.11",
  "9996.10",
  "A031.10",
  "A031.11",
  "A047.20",
  "A047.31",
  "A052.10",
  "A110.10",
  "A113.11",
  "A148.10",
  "A148.11",
  "A182.11",
  "A183.11",
  "A185.11",
  "A200.10",
  "A200.1X",
  "A204.10",
  "A204.11",
  "A229.11",
  "A235.20",
  "A259.10",
  "A259.11",
  "A270.10",
  "A271.11",
  "A334.10",
  "A334.20",
  "A334.21",
  "A353.10",
  "A358.11",
  "A386.10",
  "A386.11",
  "A400.10",
  "A401.10",
  "A401.11",
  "A402.10",
  "A402.11",
  "A404.10",
  "A405.10",
  "A405.11",
  "A406.10",
  "A406.11",
  "A406.21",
  "A407.10",
  "A407.11",
  "A408.10",
  "A409.10",
  "A417.11",
  "A417.1X",
  "A427.11",
  "A445.10",
  "A448.20",
  "A448.21",
  "A452.10",
  "A455.11",
  "A528.11",
  "A529.10",
  "A531.10",
  "A532.10",
  "A532.11",
  "A532.1X",
  "A532.21",
  "A535.10",
  "A535.11",
  "A535.20",
  "A538.10",
  "A538.11",
  "A599.11",
  "A613.50",
  "A613.51",
  "A621.11",
  "A621.31",
  "A629.11",
  "A629.20",
  "A630.10",
  "A634.10",
  "A637.10",
  "A652.10",
  "A707.10",
  "A707.11",
  "A712.11",
  "A716.20",
  "A716.21",
  "A727.10",
  "A727.1X",
  "A728.11",
  "A736.11",
  "A738.10",
  "A758.10",
  "A758.11",
  "A758.1X",
  "A760.11",
  "A761.10",
  "A761.11",
  "A761.1X",
  "A771.11",
  "A773.11",
  "A774.11",
  "A815.10",
  "A820.10",
  "A820.11",
  "A820.1X",
  "A867.10",
  "A868.10",
  "A905.10",
  "A921.1X",
  "A922.10",
  "A922.14",
  "A956.11",
  "A958.11",
  "A958.21",
  "A959.11",
  "A959.21",
  "A960.21",
  "A961.11",
  "A961.21",
  "A966.10",
  "A966.1X",
  "A967.10",
  "A967.11",
  "A967.1X",
  "A968.10",
  "A968.11",
  "A968.20",
  "A969.11",
  "A971.10",
  "A971.11",
  "A972.10",
  "B002.50",
  "B025.10",
  "B026.10",
  "B039.10",
  "B039.1X",
  "B040.1X",
  "B042.10",
  "B063.10",
  "B090.10",
  "B093.10",
  "B095.10",
  "B099.10",
  "B100.10",
  "B142.10",
  "B151.10",
  "B262.10",
  "B266.10",
  "B267.10",
  "B268.11",
  "B272.10",
  "B273.10",
  "B280.41",
  "B288.10",
  "B311.11",
  "B312.11",
  "B313.11",
  "B337.21",
  "B337.2X",
  "B338.11",
  "B344.41",
  "B344.4X",
  "B354.11",
  "B355.10",
  "B355.1X",
  "B356.10",
  "B356.1X",
  "B356.20",
  "B386.13",
  "B411.11",
  "B414.11",
  "B436.51",
  "B448.10",
  "B448.11",
  "B452.10",
  "B459.10",
  "B459.11",
  "B461.10",
  "B461.11",
  "B503.11",
  "B504.11",
  "B518.10",
  "B518.11",
  "B519.10",
  "B519.11",
  "B520.10",
  "B520.21",
  "B521.10",
  "B521.11",
  "B526.10",
  "B530.10",
  "B530.11",
  "B531.10",
  "B532.10",
  "B533.10",
  "B534.10",
  "B534.11",
  "B538.11",
  "B539.10",
  "B541.10",
  "B541.11",
  "B541.11",
  "B542.10",
  "B542.11",
  "B543.10",
  "B543.11",
  "B544.10",
  "B546.10",
  "B546.11",
  "B552.10",
  "B552.11",
  "B553.10",
  "B553.11",
  "B555.10",
  "B555.11",
  "B555.11",
  "B569.11",
  "B570.11",
  "B585.10",
  "B587.10",
  "B588.11",
  "B589.11",
  "B592.10",
  "B593.10",
  "B595.10",
  "B595.11",
  "B595.20",
  "B595.21",
  "B597.10",
  "B599.10",
  "B599.20",
  "B606.11",
  "B608.10",
  "B609.10",
  "B614.10",
  "B616.10",
  "B619.10",
  "B620.11",
  "B623.10",
  "B624.11",
  "B626.10",
  "B632.10",
  "B634.10",
  "B634.11",
  "B638.11",
  "B639.10",
  "B648.10",
  "B648.11",
  "B648.20",
  "B655.10",
  "B656.10",
  "B656.11",
  "B657.10",
  "B657.11",
  "B659.10",
  "B661.10",
  "B745.41",
  "B746.51",
  "B754.11",
  "B754.21",
  "B788.11",
  "B807.41",
  "B807.51",
  "B822.11",
  "B858.11",
  "B913.11",
  "B969.11",
  "B970.11",
  "B971.11",
  "B972.11",
  "B973.10",
  "B973.11",
  "B975.10",
  "B994.10",
  "B994.11",
  "C003.10",
  "C003.11",
  "C004.10",
  "C004.11",
  "C005.10",
  "C005.11",
  "C047.11",
  "C114.11",
  "C116.11",
  "C117.11",
  "C133.11",
  "C171.10",
  "C171.11",
  "C171.1X",
  "C173.11",
  "C174.10",
  "C176.11",
  "C177.11",
  "C178.11",
  "C182.10",
  "C185.10",
  "C185.11",
  "C207.11",
  "C244.10",
  "C245.11",
  "C246.11",
  "C249.11",
  "C251.21",
  "C274.10",
  "C274.11",
  "C274.21",
  "C282.11",
  "C285.11",
  "C289.10",
  "C306.11",
  "C313.11",
  "C315.11",
  "C348.10",
  "C349.10",
  "C349.11",
  "C350.11",
  "C394.13",
  "C395.13",
  "C396.13",
  "C398.13",
  "C421.11",
  "C424.11",
  "C499.10",
  "C499.11",
  "C542.11",
  "C542.21",
  "C543.11",
  "C545.11",
  "C636.11",
  "C649.11",
  "C651.11",
  "C652.11",
  "C657.11",
  "C743.11",
  "C744.11",
  "C824.10",
  "C877.11",
  "C878.11",
  "C880.11",
  "C881.11",
  "C882.11",
  "C884.11",
  "C892.11",
  "C894.10",
  "C896.11",
  "C927.11",
  "C928.11",
  "C936.11",
  "D018.11",
  "D059.11",
  "D065.11",
  "D155.11",
  "D216.11",
  "D219.11",
  "D272.10",
  "D274.11",
  "D274.20",
  "D276.11",
  "D279.11",
  "D280.11",
  "D395.11",
  "D426.11",
  "D428.11",
  "D449.11",
  "D450.11",
  "D451.10",
  "D452.11",
  "D529.13",
  "D570.11",
  "D619.11",
  "D628.11",
  "D706.11",
  "N124.10",
  "N124.11",
  "N125.10",
  "N125.11",
  "N212.10",
  "N212.11",
  "N234.11",
  "N235.11",
  "N236.10",
  "N236.11",
  "N246.21",
  "N247.11",
  "N264.11",
  "R103.11",
  "R104.11",
  "R105.11",
  "R122.11",
  "R124.21",
];
const bremCorto14 = [
  "3219.10",
  "3220.10",
  "3251.10",
  "3256.10",
  "3283.10",
  "4733.10",
  "4978.10",
  "5068.10",
  "5073.10",
  "5102.10",
  "5591.10",
  "5722.10",
  "5815.10",
  "5816.10",
  "5822.10",
  "5826.10",
  "6757.10",
  "6759.10",
  "6764.10",
  "6775.10",
  "7093.10",
  "7248.10",
  "7257.10",
  "7317.10",
  "7715.10",
  "7735.10",
  "7736.10",
  "7743.10",
  "7746.10",
  "7747.10",
  "7754.10",
  "7900.10",
  "7901.10",
  "7903.10",
  "7904.10",
  "8109.80",
  "8110.85",
  "8467.80",
  "8799.80",
  "8801.80",
  "8855.80",
  "9384.10",
  "9384.20",
  "9386.10",
  "9392.10",
  "9395.10",
  "A676.10",
  "A683.10",
  "A695.10",
  "A702.10",
  "A710.10",
  "B240.10",
  "B249.10",
  "B465.10",
  "B571.10",
  "B572.10",
  "B574.10",
  "B575.10",
  "B577.10",
  "B578.10",
  "B579.10",
  "B583.10",
  "B640.10",
  "B641.10",
  "B642.10",
  "B986.10",
  "C001.10",
  "C183.10",
  "C184.10",
  "C212.10",
  "C275.10",
  "C277.10",
  "C278.10",
  "C279.10",
  "C281.10",
  "C337.10",
  "D631.20",
  "D638.10",
  "N204.10",
  "XXXX.10",
];

//Numeros cortos sin comienzo ni terminacion

const bremMin0810 = [
  "2275",
  "2536",
  "2691",
  "4177",
  "4250",
  "4932",
  "5005",
  "5149",
  "5266",
  "5334",
  "5359",
  "5443",
  "5719",
  "5743",
  "6768",
  "6838",
  "6899",
  "6903",
  "6911",
  "6931",
  "6935",
  "7042",
  "7104",
  "7165",
  "7288",
  "7351",
  "7607",
  "7626",
  "7627",
  "7724",
  "7725",
  "7765",
  "7811",
  "7822",
  "7984",
  "7997",
  "8065",
  "8163",
  "8305",
  "8405",
  "8463",
  "8974",
  "9083",
  "9107",
  "9163",
  "9179",
  "9488",
  "9502",
  "9509",
  "9511",
  "9975",
  "A029",
  "A108",
  "A122",
  "A147",
  "A202",
  "A205",
  "A268",
  "A274",
  "A333",
  "A351",
  "A403",
  "A429",
  "A533",
  "A602",
  "A636",
  "A708",
  "A715",
  "A725",
  "A730",
  "A755",
  "A759",
  "A869",
  "B029",
  "B357",
  "B412",
  "B413",
  "B437",
  "B443",
  "B546",
  "B449",
  "B464",
  "B566",
  "B568",
  "B584",
  "B590",
  "B600",
  "B601",
  "B602",
  "B603",
  "B662",
  "B992",
  "C083",
  "C172",
  "C247",
  "C276",
  "D281",
  "D326",
  "N123",
  "N226",
];
const bremMin0910 = [
  "3090",
  "4765",
  "4939",
  "5055",
  "5059",
  "5101",
  "5166",
  "5173",
  "5196",
  "5253",
  "5254",
  "5255",
  "5285",
  "5290",
  "5449",
  "5584",
  "5640",
  "5707",
  "5708",
  "5736",
  "5801",
  "5843",
  "5870",
  "6727",
  "6744",
  "6747",
  "6753",
  "6766",
  "6804",
  "6845",
  "6859",
  "6893",
  "6925",
  "6943",
  "7011",
  "7012",
  "7131",
  "7196",
  "7226",
  "7314",
  "7357",
  "7367",
  "7376",
  "7398",
  "7402",
  "7409",
  "7418",
  "7421",
  "7449",
  "7453",
  "7516",
  "7606",
  "7628",
  "7629",
  "7650",
  "7651",
  "7652",
  "7653",
  "7680",
  "7686",
  "7701",
  "7702",
  "7720",
  "7727",
  "7787",
  "7806",
  "7815",
  "7823",
  "7880",
  "7932",
  "7964",
  "7977",
  "7987",
  "7988",
  "8021",
  "8025",
  "8028",
  "8066",
  "8182",
  "8186",
  "8194",
  "8404",
  "8411",
  "8456",
  "8475",
  "8481",
  "8490",
  "8519",
  "8545",
  "8601",
  "8633",
  "8655",
  "8665",
  "8695",
  "8760",
  "8815",
  "8840",
  "8852",
  "8860",
  "8864",
  "8871",
  "8872",
  "8904",
  "8932",
  "8937",
  "8952",
  "8953",
  "8965",
  "8972",
  "8973",
  "8977",
  "9022",
  "9037",
  "9078",
  "9103",
  "9104",
  "9130",
  "9142",
  "9144",
  "9145",
  "9162",
  "9165",
  "9167",
  "9177",
  "9185",
  "9268",
  "9368",
  "9369",
  "9442",
  "9464",
  "9468",
  "9483",
  "9503",
  "9505",
  "9508",
  "9537",
  "9544",
  "9554",
  "9574",
  "9582",
  "9727",
  "9738",
  "9752",
  "9753",
  "9755",
  "9772",
  "9793",
  "9827",
  "9905",
  "9922",
  "9924",
  "9996",
  "A031",
  "A052",
  "A110",
  "A148",
  "A200",
  "A204",
  "A259",
  "A270",
  "A334",
  "A353",
  "A386",
  "A400",
  "A401",
  "A402",
  "A404",
  "A405",
  "A406",
  "A407",
  "A408",
  "A409",
  "A445",
  "A452",
  "A529",
  "A531",
  "A532",
  "A535",
  "A538",
  "A630",
  "A634",
  "A637",
  "A652",
  "A707",
  "A727",
  "A738",
  "A758",
  "A761",
  "A815",
  "A820",
  "A867",
  "A868",
  "A905",
  "A922",
  "A966",
  "A967",
  "A968",
  "A971",
  "A972",
  "B025",
  "B026",
  "B039",
  "B042",
  "B063",
  "B090",
  "B093",
  "B095",
  "B099",
  "B100",
  "B142",
  "B151",
  "B262",
  "B266",
  "B267",
  "B272",
  "B273",
  "B288",
  "B355",
  "B356",
  "B448",
  "B452",
  "B459",
  "B461",
  "B518",
  "B519",
  "B520",
  "B521",
  "B526",
  "B530",
  "B531",
  "B532",
  "B533",
  "B534",
  "B539",
  "B541",
  "B542",
  "B543",
  "B544",
  "B546",
  "B552",
  "B553",
  "B555",
  "B585",
  "B587",
  "B592",
  "B593",
  "B595",
  "B597",
  "B599",
  "B608",
  "B609",
  "B614",
  "B616",
  "B619",
  "B623",
  "B626",
  "B632",
  "B634",
  "B639",
  "B648",
  "B655",
  "B656",
  "B657",
  "B659",
  "B661",
  "B973",
  "B975",
  "B994",
  "C003",
  "C004",
  "C005",
  "C171",
  "C174",
  "C182",
  "C185",
  "C244",
  "C274",
  "C289",
  "C348",
  "C349",
  "C499",
  "C824",
  "C894",
  "D272",
  "D451",
  "N124",
  "N125",
  "N212",
  "N236",
];
const bremMIn1410 = [
  "3219",
  "3220",
  "3251",
  "3256",
  "3283",
  "4733",
  "4978",
  "5068",
  "5073",
  "5102",
  "5591",
  "5722",
  "5815",
  "5816",
  "5822",
  "5826",
  "6757",
  "6759",
  "6764",
  "6775",
  "7093",
  "7248",
  "7257",
  "7317",
  "7715",
  "7735",
  "7736",
  "7743",
  "7746",
  "7747",
  "7754",
  "7900",
  "7901",
  "7903",
  "7904",
  "9384",
  "9386",
  "9392",
  "9395",
  "A676",
  "A683",
  "A695",
  "A702",
  "A710",
  "B240",
  "B249",
  "B465",
  "B571",
  "B572",
  "B574",
  "B575",
  "B577",
  "B578",
  "B579",
  "B583",
  "B640",
  "B641",
  "B642",
  "B986",
  "C001",
  "C183",
  "C184",
  "C212",
  "C275",
  "C277",
  "C278",
  "C279",
  "C281",
  "C337",
  "D638",
  "N204",
  "XXXX",
];

//75
const bremMin0875 = ["4177", "7165", "9163"];
const bremMin0975 = [
  "3090",
  "5166",
  "6845",
  "7011",
  "7012",
  "7701",
  "7806",
  "8655",
  "9145",
  "9167",
  "9772",
];
//21
const bremMin0821 = [
  "4738",
  "4931",
  "5366",
  "7165",
  "7211",
  "8843",
  "9918",
  "9975",
  "B529",
  "B566",
  "C172",
  "N258",
];
const bremMIn0921 = [
  "4939",
  "4987",
  "5254",
  "5579",
  "7359",
  "8555",
  "8931",
  "8961",
  "8969",
  "9363",
  "9372",
  "9373",
  "9464",
  "9464",
  "9750",
  "9825",
  "A334",
  "A406",
  "A448",
  "A532",
  "A716",
  "A958",
  "A959",
  "A960",
  "A961",
  "B337",
  "B520",
  "B595",
  "B754",
  "C251",
  "C274",
  "C542",
  "N246",
  "R124",
];
//11
const bremMin0811 = [
  "5085",
  "5086",
  "5334",
  "5359",
  "5743",
  "6838",
  "6897",
  "6931",
  "6935",
  "7042",
  "7288",
  "7607",
  "7626",
  "7627",
  "7765",
  "7936",
  "8405",
  "8408",
  "8463",
  "9083",
  "9084",
  "9107",
  "9488",
  "9580",
  "9584",
  "9729",
  "9734",
  "9787",
  "9975",
  "A029",
  "A029",
  "A108",
  "A112",
  "A147",
  "A202",
  "A205",
  "A332",
  "A351",
  "A355",
  "A403",
  "A429",
  "A446",
  "A533",
  "A540",
  "A636",
  "A725",
  "A737",
  "A759",
  "A863",
  "A869",
  "A871",
  "A872",
  "A957",
  "A970",
  "B271",
  "B412",
  "B413",
  "B437",
  "B449",
  "B464",
  "B529",
  "B566",
  "B568",
  "B568",
  "B590",
  "B600",
  "B605",
  "B649",
  "C046",
  "C115",
  "C208",
  "C252",
  "C307",
  "C308",
  "C352",
  "C423",
  "C425",
  "C501",
  "C653",
  "C659",
  "C661",
  "D222",
  "D278",
  "D326",
  "R101",
];
const bremMIn0911 = [
  "4939",
  "5196",
  "5509",
  "5640",
  "6665",
  "6845",
  "6893",
  "6924",
  "7131",
  "7196",
  "7226",
  "7606",
  "7650",
  "7652",
  "7701",
  "7720",
  "7727",
  "7823",
  "7932",
  "8025",
  "8304",
  "8324",
  "8411",
  "8519",
  "8545",
  "8609",
  "8614",
  "8616",
  "8633",
  "8681",
  "8690",
  "8699",
  "8700",
  "8952",
  "8953",
  "8965",
  "8998",
  "9022",
  "9103",
  "9111",
  "9130",
  "9172",
  "9355",
  "9368",
  "9464",
  "9468",
  "9505",
  "9510",
  "9573",
  "9581",
  "9586",
  "9587",
  "9590",
  "9598",
  "9738",
  "9750",
  "9752",
  "9755",
  "9772",
  "9793",
  "9825",
  "9827",
  "9848",
  "9870",
  "9871",
  "9911",
  "9914",
  "9915",
  "9921",
  "9922",
  "9923",
  "9924",
  "9925",
  "9935",
  "9936",
  "A031",
  "A113",
  "A148",
  "A182",
  "A183",
  "A185",
  "A204",
  "A229",
  "A259",
  "A271",
  "A358",
  "A386",
  "A401",
  "A402",
  "A405",
  "A406",
  "A407",
  "A417",
  "A427",
  "A455",
  "A528",
  "A532",
  "A535",
  "A538",
  "A599",
  "A621",
  "A629",
  "A707",
  "A712",
  "A728",
  "A736",
  "A758",
  "A760",
  "A761",
  "A771",
  "A773",
  "A774",
  "A820",
  "A956",
  "A958",
  "A959",
  "A961",
  "A967",
  "A968",
  "A969",
  "A971",
  "B268",
  "B311",
  "B312",
  "B313",
  "B338",
  "B354",
  "B411",
  "B414",
  "B448",
  "B459",
  "B461",
  "B503",
  "B504",
  "B518",
  "B519",
  "B521",
  "B530",
  "B534",
  "B538",
  "B541",
  "B541",
  "B542",
  "B543",
  "B546",
  "B552",
  "B553",
  "B555",
  "B555",
  "B569",
  "B570",
  "B588",
  "B589",
  "B595",
  "B606",
  "B620",
  "B624",
  "B634",
  "B638",
  "B648",
  "B656",
  "B657",
  "B754",
  "B788",
  "B822",
  "B858",
  "B913",
  "B969",
  "B970",
  "B971",
  "B972",
  "B973",
  "B994",
  "C003",
  "C004",
  "C005",
  "C047",
  "C114",
  "C116",
  "C117",
  "C133",
  "C171",
  "C173",
  "C176",
  "C177",
  "C178",
  "C185",
  "C207",
  "C245",
  "C246",
  "C249",
  "C274",
  "C282",
  "C285",
  "C306",
  "C313",
  "C315",
  "C349",
  "C350",
  "C421",
  "C424",
  "C499",
  "C542",
  "C543",
  "C545",
  "C636",
  "C649",
  "C651",
  "C652",
  "C657",
  "C743",
  "C744",
  "C877",
  "C878",
  "C880",
  "C881",
  "C882",
  "C884",
  "C892",
  "C896",
  "C927",
  "C928",
  "C936",
  "D018",
  "D059",
  "D065",
  "D155",
  "D216",
  "D219",
  "D274",
  "D276",
  "D279",
  "D280",
  "D395",
  "D426",
  "D428",
  "D449",
  "D450",
  "D452",
  "D570",
  "D619",
  "D628",
  "D706",
  "N124",
  "N125",
  "N212",
  "N234",
  "N235",
  "N236",
  "N247",
  "N264",
  "R103",
  "R104",
  "R105",
  "R122",
];
//20
const bremMin0820 = [
  "4931",
  "5366",
  "5803",
  "7211",
  "7725",
  "8163",
  "8316",
  "8868",
  "9918",
  "9975",
  "A029",
  "A114",
  "B529",
];
const bremMin0920 = [
  "3090",
  "4939",
  "4987",
  "5084",
  "5254",
  "5527",
  "5802",
  "6752",
  "6753",
  "7010",
  "7217",
  "7359",
  "7911",
  "8137",
  "8304",
  "8969",
  "9042",
  "9078",
  "9159",
  "9464",
  "9468",
  "9559",
  "9618",
  "A047",
  "A235",
  "A334",
  "A448",
  "A535",
  "A629",
  "A716",
  "A968",
  "B356",
  "B595",
  "B599",
  "B648",
  "D274",
];
const bremMin1420 = ["9384", "D631"];
//80
const bremMin0880 = ["6853", "7019", "7518", "8214", "8264", "8445", "8994"];
const bremMin0980 = [
  "7441",
  "7442",
  "7444",
  "7452",
  "7457",
  "7465",
  "7485",
  "7513",
  "7514",
  "7517",
  "7521",
  "7894",
  "7895",
  "7978",
  "7989",
  "8012",
  "8032",
  "8178",
  "8181",
  "8184",
  "8187",
  "8188",
  "8189",
  "8192",
  "8193",
  "8194",
  "8196",
  "8219",
  "8313",
  "8449",
  "8514",
  "8608",
  "8810",
  "8811",
  "8812",
  "8814",
  "8816",
  "8818",
  "8822",
  "8857",
  "8917",
  "8975",
  "8976",
  "9056",
  "9060",
  "9115",
  "9133",
  "9190",
  "9869",
];
const bremMin1480 = ["8109", "8467", "8799", "8801", "8855"];
//2X
const bremMin082X = ["4931", "9975"];
const bremMin092X = ["5745", "5802", "7010", "7812", "7813", "9468", "B337"];
//30
const bremMin0830 = ["5178", "A114", "A534"];
const bremMin0930 = [
  "4939",
  "5390",
  "5457",
  "5581",
  "5640",
  "5843",
  "6727",
  "7263",
];
//1X
const bremMin081X = ["5178", "A114", "A534"];
const bremMin091X = [
  "4939",
  "5390",
  "5457",
  "5581",
  "5640",
  "5843",
  "6727",
  "7263",
];
//76
const bremMin0876 = ["5366"];
const bremMin0976 = ["5802", "7010", "8137"];
//31
const bremMin0831 = ["5178", "A114", "A534"];
const bremMin0931 = ["4939", "5457", "5843", "8876", "8877", "A047", "A621"];
//60
const bremMin0860 = ["5443", "8094"];
//25
const bremMin0825 = ["5834"];
//81
const bremMin0881 = ["6853", "7019", "8214"];
const bremMin0981 = [
  "7421",
  "8188",
  "8192",
  "8193",
  "8459",
  "8608",
  "8709",
  "8818",
  "9133",
  "9869",
];
//50
const bremMin0850 = ["8094"];
const bremMin0950 = ["A613", "B002"];
//41
const bremMin0841 = ["9460", "A612", "B347", "B348"];
const bremMin0941 = ["4869", "B280", "B344", "B745", "B807"];
//27
const bremMin0827 = ["9512"];
//17
const bremMin0817 = ["9597", "A135", "A729"];
//13
const bremMin0813 = ["D530"];
const bremMin0913 = ["B386", "C394", "C395", "C396", "C398", "D529"];
//40
const bremMin0840 = ["A612"];
//77
const bremMin0977 = ["5390", "6727"];
//3X
const bremMin093X = ["5457"];
//14
const bremMin0914 = ["9510", "A922"];
//51
const bremMin0951 = ["A613", "B436", "B746", "B807"];
//4X
const bremMin094X = ["B344"];
//85
const bremMin1485 = ["8110"];

export default CrudLayout;
